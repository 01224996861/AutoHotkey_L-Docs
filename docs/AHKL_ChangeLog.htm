<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Changes &amp; New Features</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Changes &amp; New Features</h1>
<p>This changelog only concerns AutoHotkey_L. Read <a href="ChangeLogHelp.htm">AutoHotkey's changelog</a>.</p>

<!--new revisions go here-->
<h2>Revision 58 - September 5, 2010</h2>
<p>Added: <code>static var := expression</code></p>
<h2>Revision 57 - September 4, 2010</h2>
<p>Fixed Str*, WStr* and AStr* DllCall return types on x64.</p>
<p>Added functionality to <a href="Functions.htm#InStr">InStr</a> to bring it in line with StringGetPos:</p>
<ul>
  <li>If <i>StartingPos</i> is negative, the search is conducted right-to-left beginning at that offset from the end.</li>
  <li>An additional parameter is available to specify which <i>occurrence</i> of the string to find.</li>
</ul>
<p>Added <code><a href="commands/_Include.htm">#include</a> &lt;<i>LibName</i>&gt;</code> for explicitly including a script from a <a href="Functions.htm#lib">function library folder</a>.</p>
<p>Added functionality to <a href="commands/IniRead.htm">IniRead</a> and <a href="commands/IniWrite.htm">IniWrite</a> allowing an entire section to be read or written.</p>
<p>Added functionality to <a href="commands/IniRead.htm">IniRead</a> allowing a list of section names to be retrieved.</p>
<p>Added support for <a href="commands/Run.htm#verbs">custom verbs</a> to Run/RunWait: <code>Run *<i>verb file</i></code>.</p>
<p>Made <a href="Compat.htm#Run">improvements</a> to the way Run/RunWait extracts the action and its parameters from the <i>Target</i> parameter.</p>
<p>Changed <a href="Functions.htm#NumGet">NumGet</a>/<a href="Functions.htm#NumPut">NumPut</a> to allow <i>Offset</i> to be omitted entirely since <i>Type</i> is always non-numeric.</p>
<p>Removed the restriction that a label can't point to the end of a block.</p>

<h2>Revision 56 - August 29, 2010</h2>
<p>Added support for x64 compiled scripts. Requires Ahk2Exe_L and x64 AutoHotkeySC.bin.</p>
<p>Fixed: Deref operator (<code>*addr</code>) rejected addresses outside 32-bit range.</p>
<p>Fixed: <code>#If <i>expression</i></code> memory allocation error on x64.</p>
<p>Fixed: Custom hotstring end chars with code points greater than U+00FF.</p>
<p>Fixed: Special characters being sent out of sequence by SendInput/Play.</p>
<p>Fixed: <code>*/</code> being discarded in continuation sections (see L54).</p>

<h2>Revision 55 - August 19, 2010</h2>
<p>Fixed: GroupActivate not setting ErrorLevel=1 if no Label was specified.</p>
<p>Fixed: Tab controls in x64 build.</p>
<p>Fixed: String-copy mode of StrPut when length is omitted; broken by L53.</p>
<p>Fixed: Data-alignment issues in x64 builds.</p>
<p>Changed: Set A_LastError for more File* commands to assist debugging.</p>
<p>Includes FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version and FileSetAttrib/Time.</p>
<p>Excludes FileCopyDir, FileRecycle, FileMoveDir, FileRemoveDir, FileRecycleEmpty, FileCreateDir and FileInstall as the APIs used do not consistently set or return a Win32 error code.</p>

<h2>Revision 54 - August 15, 2010</h2>
<p>Fixed: RunAs in Unicode build. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=372973#372973">[jackieku]</a></p>
<p>Fixed: RegisterCallback in x64 build. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=374773#374773">[fincs]</a></p>
<p>Fixed: Executables failing to run on Win2k and WinXP prior to SP2. Win2k requires SP4 and updates (probably <a href="http://support.microsoft.com/kb/816542">KB 816542</a>). XP not tested.</p>
<p>Fixed: Dialogs such as MsgBox became unresponsive when interrupted by another script thread. Message filter/workaround added in L45 had to be removed. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=358029#358029">[Bug report]</a></p>
<p>Fixed: Multi-byte characters in default ANSI codepage; this was also causing a memory leak. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=375342#375342">[Bug report]</a></p>
<p>Fixed: ComObject now allows purely numeric property/method names. <a href="http://www.autohotkey.com/forum/viewtopic.php?p=375393#375393">[Bug report]</a></p>
<p>Enhanced usability and capabilities of FileOpen/File object.</p>
<ul>
  <li>FileOpen's <i>Flags</i> parameter accepts a human-readable string of flags.</li>
  <li>FileOpen's "update" mode has been renamed "read/write" and now creates the file if it didn't already exist.</li>
  <li>FileOpen sets A_LastError as appropriate.</li>
  <li><code>File := FileOpen(handle,"h")</code> wraps an existing file handle in an object.</li>
  <li><code>File.Seek(n)</code> defaults to SEEK_END when n is negative.</li>
  <li><code>File.Pos</code> (or <code>File.Position</code>) can be used in place of Tell and Seek.</li>
  <li><code>File.Pos</code>, <code>File.Length</code>, <code>File.AtEOF</code> and <code>File.__Handle</code> can be used without empty parentheses<code>()</code>.</li>
  <li><code>File.Length</code> can be set, as in <code>File.Length:=n</code>.</li>
  <li><code>File.Read<i>Num</i>()</code> and <code>File.Write<i>Num</i>(n)</code> read or write a number, where <i>Num</i> is a NumGet-compatible type name.</li>
  <li><code>File.WriteLine(s)</code> is equivalent to <code>File.Write(s "`n")</code>, for symmetry with <code>File.ReadLine()</code>.</li>
  <li><code>File.Read()</code> reads and returns the remainder of the file when used without parameters.</li>
  <li>File object now returns "" for unrecognized methods and invalid syntax rather than the numeric <i>address</i> of "".</li>
</ul>
<p>Changed: GroupAdd's Label parameter now applies to the whole group. <a href="http://www.autohotkey.com/forum/topic61362.html">[Discussion]</a></p>
<p>Changed: GroupActivate sets ErrorLevel on success/failure. (Same thread as above.)</p>
<p>Changed: <code>*/</code> at the beginning of a line is ignored if there was no <code>/*</code>. <a href="http://www.autohotkey.com/forum/topic61109.html">[Discussion]</a></p>
<p>Removed ToCodePage and FromCodePage subcommands of Transform.</p>

<h2>Revision 53 - August 8, 2010</h2>

<p><b>Merged AutoHotkey64</b> - COM support and x64 compatibility.</p>
<p><b>x64</b> (<i>changes since AutoHotkey64</i>):</p>
<ul>
  <li>Fixed floating-point return values and exception handling for DllCall.</li>
  <li>Fixed RegEx callouts.</li>
  <li>Re-enabled GetProcAddress optimisation for DllCall.</li>
  <li>NumPut and NumGet default to "Int64" in x64 builds.</li>
</ul>
<p><b>COM</b> (<i>changes since AutoHotkey64</i>):</p>
<ul>
  <li>Allow ComObjParameter to wrap 64-bit values in 32-bit builds.</li>
  <li>Implemented more standard ref counting conventions in ComObjActive.</li>
  <li>Prevent extraneous AddRef for new ComObjects in certain cases.</li>
  <li>Don't treat pdispVal==NULL return value from Invoke as an error.</li>
  <li>Fail more predictably when given wrong type of object.</li>
  <li>Require explicit second param in ComObjType, don't assume "IID".</li>
  <li>Free local vars after ComEvent calls a function.</li>
  <li>Remove pVarResult param from ComEvent; use return value instead.</li>
  <li>Pass the original wrapper ComObject in each ComEvent call.</li>
  <li>Add context to ComError dialog; let the buttons make more sense.</li>
</ul>
<p>Implemented common syntax validation code for enumerators. <code>Enum[]</code> and <code>Enum.Next()</code> are now supported with or without parameters. <code>Enum[]:=val</code> and similar obscure forms which worked in AutoHotkey_COM/AutoHotkey64 are not allowed.</p>
<p>"Ptr" type is still signed (unlike AutoHotkey64), for maximum flexibility and consistency.</p>
<p><b>Other changes:</b></p>
<p>Added: <code>Object.<b>HasKey</b>(key)</code>.</p>
<p>Added: <code>Object(obj)</code> increments obj's reference count and returns its address.</p>
<p>Added: <code>ObjAddRef()</code> and <code>ObjRelease()</code>.</p>
<p>Fixed: A_ThisHotkey now has the expected value when used with #If.</p>
<p>Fixed: RunAs in Unicode build (fixed by jackieku).</p>
<p>Changed: Default script codepage for ANSI builds is now CP0 (ANSI).</p>
<p>Changed: <code>x.y[]</code> is now equivalent to <code>(x.y)[]</code> rather than <code>x["y"]</code>.</p>
<p>Changed: Built-in methods can now be called with or without the underscore prefix (e.g. <code>obj.MaxIndex()</code> or <code>obj._MaxIndex()</code>).</p>

<h2>Revision 52 (again) - July 10, 2010</h2>
<p>Added support for built-in and environment variables in double-derefs.</p>
<p>Improved support for multi-byte characters in certain codepages (previously only 932, 936, 949, 950 and 1361 were supported).</p>
<p>Fixed: StrPut failed for codepages which don't support WC_NO_BEST_FIT_CHARS, such as UTF-7.</p>
<p>Fixed: Double-deref as object - <code>literal%var%.literal</code>.</p>
<p>Fixed: <code>StrPut("", Encoding)</code> null-terminated an invalid address.</p>

<h2>Revision 52 - June 12, 2010</h2>
<p>Fixed: ObjRemove's Key parameter is now optional, as with <a href="objects/Object.htm#Remove">Object._Remove</a>.</p>
<p>Fixed: Files were improperly locked while reading, unlike in older versions.</p>
<p>Fixed: Uppercase Hex format caused negative integers to become unsigned.</p>
<p>Fixed: RegExMatch was corrupting output array items when specific conditions were met. See <a href="http://www.autohotkey.com/forum/topic59120.html">bug report</a>.</p>

<h2>Revision 51 - April 11, 2010</h2>
<p>Changed: Use &lt;EXENAME&gt;.ahk instead of AutoHotkey.ini or AutoHotkey.ahk.</p>
<p>Changed: Default to UTF-8 for script files; override with /CPnnn.</p>
<p>Fixed: Unpause when the script exits so that object __Delete meta-functions can run.</p>

<h2>Revision 50 - March 27, 2010</h2>
<p>Improved flexibility of <a href="objects/Object.htm#Insert">Object._Insert</a>.
<ul>
  <li><code>Object._Insert(x)</code> - inserts x at <code>_MaxIndex()="" ? 1 : _MaxIndex() + 1</code>.</li>
  <li><code>Object._Insert(i,x,y,z)</code> - inserts <code>x,y,z</code> at <code>i,i+1,i+2</code>.</p></li>
</ul>
<p>Improved flexibility of <a href="objects/Object.htm#Remove">Object._Remove</a>.
<ul>
  <li><code>Object._Remove(k)</code> - removes and returns the value associated with k.</li>
  <li><code>Object._Remove()</code> - removes and returns the value at _MaxIndex().</p></li>
</ul>
<p>Added file share mode flags to FileOpen [by jackieku].</p>
<p>Fixed: 'P' option of RegExMatch incorrectly output 1 for subpatterns which did not match anything.</p>
<p>Fixed: <code>Object._SetCapacity(key,n)</code> was not null-terminating in some cases.</p>
<p>Fixed: StatusBarGetText returned only half of the text in Unicode builds.</p>

<h2>Revision 49 - March 14, 2010</h2>
<p>Added <a href="objects/Object.htm#NewEnum">obj._NewEnum()</a>.</p>
<p>Added <a href="objects/Object.htm">ObjMethod(obj)</a> for each built-in <code>obj._Method()</code>.</p>
<p>Changed: ObjSet/Get/Call can no longer be called/overridden by script.</p>
<p>Fixed: Potential crash caused by VK_PACKET check added in L48.</p>
<p>Fixed: Character codes in VK_PACKET events were potentially misinterpreted as scancodes.</p>
<p>Fixed: ExcludeText was ineffective after the first matching control.</p>

<h2>Revision 48 - February 21, 2010</h2>
<p>Fixed: Standalone <code>obj.()</code> was not recognized as a valid expression.</p>
<p>ControlSend now uses WM_CHAR to support characters which have no associated keycode.  For instance, this applies to "&#133;" (en-US), "&#x221e;" in a Unicode build and <code>{U+221e}</code> in either build.</p>
<p>KeyHistory now shows the full 16-bit character code for VK_PACKET (VK=E7) events.  <a href="commands/Send.htm#Unicode">Send</a> may indirectly cause these to be generated for Unicode characters.</p>

<h2>Revision 47 - February 13, 2010</h2>
<p>Fixed (Unicode): ControlGet,List with ListView controls.</p>

<h2>Revision 46 - February 11, 2010</h2>
<p>Added A_FileEncoding, which returns the current default file encoding.</p>
<p>Added <a href="commands/StrPutGet.htm">StrPut</a> and extended <a href="commands/StrPutGet.htm">StrGet</a> with additional features.</p>

<h2>Revision 45 - February 8, 2010</h2>
<p>Added _GetAddress; _SetCapacity/_GetCapacity may now operate on a given field.  <a href="objects/Object.htm">[more info]</a></p>
<p>Added workaround for WM_PAINT infinite loop often caused by subclassing.</p>
<p>Allow <code>obj.()</code> as a means to call the default method of an object; equivalent to <code>obj[""]()</code>.</p>
<p>Dev: Added solution and project files for MSBuild 4.0 & VS2010.  <a href="http://github.com/Lexikos/AutoHotkey_L/commit/ed81ea089c223b46c883036c14454aa4386d3801">[more info]</a></p>
<p>Fixed (Unicode): 'Running' column in ListHotkeys.</p>

<h2>Revision 44 - February 7, 2010</h2>
<p>Fixed: Attempting to set "nothing" crashed the script. For instance, <code>x[]:=z</code>.</p>
<p>Fixed (Unicode): Unable to find default script (Documents\AutoHotkey.ahk).</p>
<p>Fixed (Unicode): A_Desktop, A_ProgramFiles and several other built-in variables which read their value from the registry caused strings to be incorrectly terminated.</p>
<p>Fixed (ANSI): Characters in the range 0x80-0xFF couldn't be found by InStr or StringReplace.</p>
<p>Changed (ANSI): Treat ToCodePage/FromCodePage like other unsupported/invalid subcommands.</p>

<h2>Revision 43 - January 29, 2010</h2>
<p>Fixed: obj.Func() resulting in a random integer when it should be an empty string.</p>

<h2>Revision 42 - January 28, 2010</h2>
<p>Merged with AutoHotkeyU.</p>
<p>Numerous bug-fixes and improvements, some relating to the merge.</p>

<h2>Revision 41 - December 20, 2009</h2>
<p>Fixed: Floating-point numbers were equivalent to an empty string when used as keys in objects.  They are now converted to numeric strings in the current <a href="commands/SetFormat.htm">float format</a>, as originally intended.</p>

<h2>Revision 40 - December 13, 2009</h2>
<p>Changed meta-functions and multi-param behaviour to improve flexibility.  Meta-functions are now invoked *before* searching for an appropriate field in each base object; however, values in x.base will override meta-functions defined in x.base.base.  Chaining meta-functions (inheritence) is now possible by avoiding "Return"</p>
<p>Improved Default Base functionality to be more consistent with real objects.</p>
<p>Changed (Debugger): While stepping through code, skip all braces except those which end a function.</p>
<p>Changed (Debugger): When stepping onto the hidden "Exit" at end of the script, consider it to be *below* the last physical line to avoid confusion.</p>

<h2>Revision 39 - December 2, 2009</h2>
<p>Fixed (Debugger): Error in Base64 decoding used by property_set.</p>

<h2>Revision 38 - November 17, 2009</h2>
<p>Added: <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a> directive to change which key is used to mask Alt/Win keyup events.  See <a href="http://www.autohotkey.com/forum/topic22378.html">this thread</a> for background information.</p>
<p>Changed: If <code>x[1,2]:=3</code> creates an object for <code>x[1]</code>, it's base is no longer automatically set to <code>x.base</code>.  See <a href="Objects.htm#JaggedArraysEx">the documentation</a> for a method of controlling this behaviour.</p>  

<h2>Revision 37 - November 7, 2009</h2>
<p>Added: Support for <code>obj[method_name](params)</code> object-call syntax.</p>

<h2>Revision 36 - November 4, 2009</h2>
<p>Changed: If <code>x.y</code> or similar is immediately followed by an open-bracket (<code>[</code>), the right-most identifier preceding the bracket is treated as the first parameter of the operation.  For instance, <code>a.b.c[d]</code> is equivalent to <code>ObjGet(a.b,"c",d)</code> and <code>x.y[z]:=v</code> is equivalent to <code>ObjSet(x,"y",z,v)</code>. Previously each sub-expression preceding a bracket was evaluated separately.</p>
<p>Changed: If a method-call such as <code>x.y()</code> is followed immediately by an assignment, the parentheses are treated as brackets. For instance, <code>x.y(z):=v</code> is now equivalent to <code>ObjSet(x,"y",z,v)</code>.</p>
<p>Fixed: If(expr) and While(expr) with no delimiting space or comma.</p>  

<h2>Revision 35 - October 25, 2009</h2>
<p>Fixed: Standalone expressions beginning with two or more "dots", such as <code>x.y.z()</code>. (Broken by L34.) Note that '(' or '[' or ':=' is still required.</p>

<h2>Revision 34 - October 24, 2009</h2>
<p>Changed: Setting a value within an object to an empty string now stores the empty string rather than removing the key-value pair from the object.  _Remove can still be used to completely remove key-value pairs.</p>
<p>Changed: Command names must be terminated with a space, tab or comma.  The following characters no longer bypass this requirement: <span class="Code">&lt;&gt;:+-*/!~&|^[]</span>.  For instance, syntax errors such as <span class="Code">MsgBox< foo</span> and <code>If!foo</code> are now caught at load-time.</p>
<p>Fixed: Return now properly handles expressions which result in a variable containing an object.  For instance, <code>Return x:=y</code>, <code>Return (x)</code>, <code>Return x,...</code> and similar should work now (<code>Return x</code> already worked).</p>
<p>Fixed: Multi-parameter get/set did not correctly support meta-functions for multiple objects (such as for <code>x</code> <i>and</i> <code>x[y]</code> in the expression <code>x[y,z]</code>).</p>
<p>Fixed: Cascading object-assignments such as the <code>x[y]:=z</code> in <code>r:=x[y]:=z</code> could not yield numbers or objects - broken by L33.</p>
<p>Fixed: <code>x._Remove(y)</code> crashed the script or removed the wrong item if <code>x</code> did not contain <code>y</code>.</p>
<p>Fixed: <code>x.=y</code>, <code>if x.y=...</code> and similar.  May affect other expressions.</p>
<p>Fixed: Standalone ternary expressions no longer requires spaces.  For instance, <code>x? F(1) : F(2)</code> is now allowed.</p>
<p>Debugger: On script exit, disconnect debugger *after* releasing objects to allow debugging of __Delete handlers.</p>

<h2>Revision 33 - October 3, 2009</h2>
<p>Fixed: Local variables were not automatically freed for functions which return objects or pure numbers.</p>
<p>Fixed: Two separate reference-counting errors related to ternary operator and Object().</p>
<p>Fixed: If a string returned by a scripted object function was assigned directly to a variable, the variable's length was set incorrectly.</p>
<p>Fixed: If the last operation in an expression retrieved a string from a temporary object, the object and string were freed prematurely.</p>
<p>Fixed: Numeric strings with special formatting were not preserved when returned from a function via a variable or passed to a recursive function.</p>
<p>Fixed: If the final result of an expression (other than for Return) is an object, correctly yield an empty string instead of silently aborting the thread.</p>
<p>Fixed: __Delete meta-functions sometimes overwrote temporary values in the deref buffer.</p>
<p>Added: An address retrieved via &amp;object may be cast back into an object reference by using Object(address).</p>  

<h2>Revision 32 - September 26, 2009</h2>
<p>Fixed: Send/PostMessage crash when less than three parameters were specified.</p>

<h2>Revision 31 - September 26, 2009</h2>
<p>Added: Object/array support and numerous minor changes to make this possible.</p>
<p>Added: Support for While(expression) with no delimiting space.</p>
<p>Added: Trim, LTrim, RTrim.</p>
<p>Added: A ~= B; equivalent to RegExMatch(A, B).  May be removed in a future revision.</p>
<p>Fixed: An incompatibility with LowLevel.</p>
<p>Changed: Characters [, ] and ? are no longer valid in variable names.  Consequently, ? (ternary) no longer requires a space on either side.</p>
<p>Changed: Optional parameters may now be omitted at any position in the parameter list of a non-dynamic function call. Since this works by automatically inserting the parameter's default value at load-time, it is not supported or allowed for dynamic function-calls.</p>
<p>Debugger: Various minor changes to make program flow easier to follow while stepping through code.</p>
<p>Optimization: If DllCall's first parameter is a literal string which identifies a function already present in memory, it is replaced with the actual address of the function.</p>
<p>Updated from v1.0.48.03 to v1.0.48.04.</p>

<h2>Revision 30 - May 31, 2009</h2>
<p>Updated from v1.0.48.02 to v1.0.48.03.</p>

<h2>Revision 29 - May 2, 2009</h2>
<p>All supported image formats may now be used as menu icons.  Currently it is necessary to specify "actual size" when setting the icon to preserve transparency on Windows Vista and later. For example:
<pre>Menu, Icon, MenuItemName, Filename.png,, 0</pre></p>  

<h2>Revision 28 - May 2, 2009</h2>
<p>Improved average-case performance of dynamic function calls by implementing binary search for function name look-ups. This change also applies to other areas, such as load-time resolution of function references in expressions and run-time resolution by OnMessage, RegisterCallback, etc.</p>  

<h2>Revision 27 - April 26, 2009</h2>
<p>Updated from v1.0.48.00 to v1.0.48.02.</p>  

<h2>Revision 26 - April 11, 2009</h2>
<p>Fixed: Menu icons were not drawn on items which have sub-menus if owner-drawing was in use.</p>
<p>Fixed: Menu icons were not freed if all menu items were deleted at once.</p>
<p>Changed (Source): Renamed AutoHotkey.sln to AutoHotkey_L.sln to allow VS window to be identified more easily.</p>  

<h2>Revision 25 - March 30, 2009</h2>
<p>Fixed: Send {U+xxxx} correctly sets modifier key-state as with any normal key.</p>
<p>Fixed: Send {U+..xx} no longer triggers hotkey SCxx.</p>

<h2>Revision 24 - March 30, 2009</h2>
<p>Added: Support for Send {U+xxxx}. SendInput() is used where available for proper unicode support, otherwise falls back to Alt+Numpad.</p>

<h2>Revision 23 - March 30, 2009</h2>
<p>Fixed: GuiControl, Enable/Disable now only resets focus if the focused control was disabled.</p>  

<h2>Revision 22 - March 26, 2009</h2>
<p>Optimized If var [not] in/contains MatchList, especially for long lists containing shorter fields.</p>  

<h2>Revision 21 - March 16, 2009</h2>
<p>Minor optimizations to While. [thanks Chris]</p>
<p>Fixed (Debugger): Revisions 19 and 20 omitted timer threads from the call stack.</p>
<p>Fixed (Debugger): XML-reserved characters were not escaped in most situations.</p>
<p>Fixed (Debugger): Incorrect command and transaction_id were used in the final response before exiting the script.</p>  

<h2>Revision 20 - February 27, 2009</h2>
<p>Changed: If an icon cannot be loaded with the new method, fall back to the old method.</p>

<h2>Revision 19 - February 26, 2009</h2>
<p>Added: Gui, Font, qN option to set font quality/control anti-aliasing, where N is between 0 and 5.</p>
<p>Fixed: IL_Add now loads icons at the most appropriate size when multiple sizes exist.</p>
<p>Merged with AutoHotkey v1.0.48, introducing bug fixes, optimizations and other changes by Chris. Some AutoHotkey_L features were integrated into the mainstream release; changes to these features since previous revisions are as follows:</p>
<ul>
  <li>Legacy behaviour is no longer applied to While - e.g. "While %x%" is correctly interpreted as a double-deref rather than as "While x".</li>
  <li>One-True-Brace style is now supported for While.</li>
  <li>Static vars may now be declared and initialized in assume-static functions.</li>
  <li>Passing too <em>few</em> parameters in a dynamic function call is no longer allowed, as it allows the function's caller to second-guess the function's designer, reduces the ability to detect script bugs at runtime, and may cause the application to crash if calling a built-in function.</li>
</ul>

<h2>Revision 18 - February 21, 2009</h2>
<p>Fixed: Incomplete bug-fix in previous revision causing concat followed by assignment to skip the rest of the expression in some cases.</p>

<h2>Revision 17 - February 20, 2009</h2>
<p>Added: Menu icons via Icon and NoIcon sub-commands of the Menu command.</p>
<p>Changed: Negative icon numbers can now be used to indicate a resource ID within an executable.</p>
<p>Changed: Set default style of menus to include MNS_CHECKORBMP.</p>
<p>Changed: Load both small and large versions of custom tray icons to allow the correct icons to be shown in the appropriate places.</p>
<p>Fixed: Loading of icons from executable files at sizes other than the system small/large.</p>

<h2>Revision 16 - February 4, 2009</h2>
<p>Fixed: Deleting a menu item partially deleted its associated sub-menu.</p>  

<h2>Revision 15 - February 1, 2009</h2>
<p>Fixed: SetFormat's presence in a *compiled* script was not disabling binary number write-caching. SetFormat should now work correctly in compiled scripts.</p>

<h2>Revision 14 - February 1, 2009</h2>
<p>Numerous bug-fixes and optimizations by Chris (pre-v1.0.48 beta).</p>
<p>Added: Support for regex callouts and the auto-callout option 'C'.</p>
<p>Changed: A_AhkVersion now includes the revision number. For instance, this is 1.0.47.07.L14.</p>
<p>Fixed: HWND's/window ID's were sign-extended to 64-bit. For instance, 0xb482057e became 0xffffffffb482057e.</p>

<h2>Revision 13 - November 29, 2008</h2>
<p>Fixed: Invalid DllCall types were treated as INT in some build environments.</p>
<p>Added: Workaround for GuiEscape issue when disabling focused control.</p>
<p>Changed version info: InternalName, ProductName and FileDescription are now "AutoHotkey_L" instead of "AutoHotkey".</p>

<h2>Revision 12 - September 6, 2008</h2>
<p>Fixed: Potential access violation when using property_get on a built-in variable. -- DBGP</p>

<h2>Revision 11 - September 5, 2008</h2>
<p>Fixed: Remove checksum from AutoHotkeySC.bin via post-build script (AutoHotkey must be installed).</p>
<p>Added: .L suffix to A_AhkVersion.</p>
<p>Added: Preliminary support for DBGp (interactive debugging).</p>

<h2>Revision 10 - August 2, 2008</h2>
<p>Fixed: WheelLeft/WheelRight support, which was broken in revision 9.</p>

<h2>Revision 9 - July 29, 2008</h2>
<p>Fixed: Allow Break/Continue in While.</p>
<p>Fixed: TrayTip in non-English Windows and possibly other side-effects of using Vista headers.</p>

<h2>Revision 8 - July 27, 2008</h2>
<p>Added: #IfTimeout directive to set the timeout for evaluation of #If expressions, in milliseconds. Default is 1000.</p>
<p>Added: Assume-static mode for functions. "Static" must precede any local/global variable declarations.</p>
<p>Added: One-true-brace support for While.</p>
<p>Changed: While now sets A_Index to the iteration about to begin.</p>

<h2>Revision 7 - July 26, 2008</h2>
<p>Added: IsFunc(FuncName) - Returns a non-zero number if FuncName exists in the script or as a built-in function.</p>

<h2>Revision 5 - July 19, 2008</h2>
<p>Cleaned up obsolete references to test scripts.</p>
<p>Added basic default test script.</p>

<h2>Revision 4 - July 18, 2008</h2>
<p>Added: #if (expression) - Similar to #IfWinActive, but for arbitrary expressions.</p>
<p>Added: WheelLeft, WheelRight - Support for WM_MOUSEHWHEEL, which was introduced with Windows Vista. (Requires Vista.)</p>
<p>Added: While, expression - Loop while a condition is true.</p>
<p>Added: A_IsPaused - True if the underlying thread is paused.</p>
<p>Added: A_IsCritical - True if the current thread has been marked uninterruptible by the "Critical" command.</p>
<p>Changed: Allow any number of parameters to be passed in dynamic function calls.</p>
<p>Fixed: Access Violation caused by WinGetClass and subclassed windows.</p>
<p>Fixed: Access Violation caused by empty dynamic function references.</p>

<p>&nbsp;</p>
</div>
</body>
</html>
