<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Miscellaneous Features</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Miscellaneous Features</h1>

<h2><a name="vars"></a>Built-in Variables</h2>
<table class="info">
  <tr><td>A_IsUnicode</td><td>In Unicode builds, this variable contains <code>1</code> (<i>true</i>).  In ANSI builds it is not defined, so is effectively <i>false</i>.</td></tr>
  <tr><td>A_FileEncoding</td><td>Contains the default encoding for various commands; see <a href="commands/FileEncoding.htm">FileEncoding</a>.</td></tr>
  <tr><td>A_OSVersion</td><td>Contains <code>WIN_7</code> on Windows 7, else one of the values documented <a href="Variables.htm#OSVersion">here</a>.</td></tr>
  <tr><td>A_PtrSize</td><td>Contains the size of a pointer, in bytes.  On current builds, this is <code>4</code>.</td></tr>
</table>

<h2>Changes to Commands</h2>

<h3><a name="bom"></a>Unicode Script Files</h3>
<p>If a UTF-8 or UTF-16 byte order mark is present in a script file, it is loaded as Unicode.</p>
<p>However, the following caveats apply:</p>
<ul>
  <li>All text is converted to the <a href="Compat.htm#Format">native string format</a>, so some characters may be replaced with a placeholder in the ANSI build.</li>
  <li>Compiled scripts must be in UTF-8 format.</li>
</ul>

<h3><a name="enc"></a>Text Encodings</h3>
<p><a href="commands/FileRead.htm">FileRead</a>, <a href="commands/FileReadLine.htm">FileReadLine</a>, <a href="commands/LoopReadFile.htm">Loop Read</a> and <a href="commands/FileAppend.htm">FileAppend</a> support the majority of Windows-supported text encodings, not just the system default ANSI code page.  <a href="commands/FileEncoding.htm">FileEncoding</a> can be used to set the default encoding, which can be overridden for FileRead and FileAppend as follows:</p>
<pre class="Syntax">FileRead, OutputVar, *P<i>nnn</i> Filename
FileAppend [, Text, Filename, Encoding]</pre>
<p>While <i>nnn</i> must be a numeric <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">code page identifier</a>, <i>Encoding</i> follows the same format as <a href="commands/FileEncoding.htm">FileEncoding</a>.</p>
<p><b>See also:</b> <a href="Compat.htm#FileRead">Script Compatibility</a></p>

<h3><a name="sendu"></a>Send / ControlSend</h3>
<p>Scripts may send Unicode characters one of the following ways:</p>
<ul>
  <li><code>{U+<i>nnnn</i>}</code> where <i>nnnn</i> is the hexadecimal value of the character excluding the 0x prefix.</li>
  <li>By including Unicode characters directly in the text. This is possible only in Unicode builds.</li>
</ul>
<p>This is achieved by using one of the following methods:</p>
<ul>
  <li>Map the character to a virtual keycode for use with the appropriate API, which depends on the command or <a href="commands/SendMode.htm">Send mode</a>.</li>
  <li><i>Send:</i> Call <a href="http://msdn.microsoft.com/en-us/library/ms646310.aspx">SendInput()</a>; the current Send mode has no effect.</li>
  <li><i>ControlSend:</i> Post a <a href="http://msdn.microsoft.com/en-us/library/ms646276.aspx">WM_CHAR</a> message to the window or control.</li>
</ul>

<h3><a name="hex"></a>SetFormat</h3>
<p>Hexadecimal digits <code>A-F</code> may be formatted in either lowercase or uppercase:</p>
<pre>SetFormat, IntegerFast, H  <em>; UPPERCASE</em>
SetFormat, IntegerFast, h  <em>; lowercase</em></pre>


<h2><a name="types"></a>Datatypes</h2>
<p>Additional datatypes are available for use with <a href="Functions.htm#NumGet">NumGet</a>, <a href="Functions.htm#NumPut">NumPut</a> and/or <a href="commands/DllCall.htm">DllCall</a>.</p>
<ul>
  <li><span class="Syntax">Ptr</span>: Signifies that the value is a memory address.  In current builds this is equivalent to <code>Int</code>, but if a 64-bit build is developed it would be equivalent to <code>Int64</code>.  As with other integer types, the <b>U</b> prefix and <b>P</b> or <b>*</b> suffix are supported where applicable.</li>
  <li><span class="Syntax">AStr</span>, <span class="Syntax">WStr</span>: available only for DllCall; see <a href="Compat.htm">Script Compatibility</a>.</li>
</ul>


<h2><a name="icons"></a>Improvements to Icon Support</h2>

<h3>Unusual Sizes</h3>
<p>Icon resources of any size supported by the operating system may be extracted from executable files.  When multiple sized icon resources exist within an icon group, the most appropriate size is used.  Prior to revision 17, an arbitrary icon resource was selected by the system, scaled to the system large icon size, then scaled back to the requested size.</p>

<h3>Resource Identifiers</h3>
<p>Negative icon numbers may be used to identify a group icon resource within an executable file. For example, the following sets the tray icon to the default icon used by ahk files:</p>
<pre>Menu, Tray, Icon, %A_AhkPath%, -160</pre>


<h2><a name="fontq"></a>Text Quality</h2>
<p>Text rendering quality on a script's Gui may be controlled by using <b>Gui, Font, q<em>N</em></b>, where <em>N</em> is a number from the following table:</p>
<table class="info">
  <tr><td>0 = DEFAULT_QUALITY</td><td>Appearance of the font does not matter.</td></tr>
  <tr><td>1 = DRAFT_QUALITY</td><td>Appearance of the font is less important than when the PROOF_QUALITY value is used.</td></tr>
  <tr><td>2 = PROOF_QUALITY</td><td>Character quality of the font is more important than exact matching of the logical-font attributes.</td></tr>
  <tr><td>3 = NONANTIALIASED_QUALITY</td><td>Font is never antialiased, that is, font smoothing is not done.</td></tr>
  <tr><td>4 = ANTIALIASED_QUALITY</td><td>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</td></tr>
  <tr><td>5 = CLEARTYPE_QUALITY</td><td>Windows XP and later: If set, text is rendered (when possible) using ClearType antialiasing method.</td></tr>
</table>
<p>For more details of what these values mean, see <a href="http://msdn.microsoft.com/en-us/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
<p>Since the highest quality setting is usually the default, this feature is more typically used to disable anti-aliasing in specific cases where doing so makes the text clearer.</p>


</body>
</html>
