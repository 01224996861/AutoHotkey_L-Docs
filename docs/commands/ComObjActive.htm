<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>ComObjActive()</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>ComObjActive() <span class="ver">[AHK_L 53+]</span></h1>

<p>Retrieves a running object that has been registered with OLE.</p>
<pre class="Syntax">ComObject := ComObjActive(CLSID)</pre>

<p id="enwrap">Wraps or unwraps a raw <a href="http://msdn.microsoft.com/en-us/library/dd318520.aspx">IDispatch</a> pointer in a usable object.</p>
<pre class="Syntax">ComObject := ComObjEnwrap(DispPtr)
DispPtr := ComObjUnwrap(ComObject)</pre>

<p id="param">Wraps a value and type in an object to pass it as a parameter or return value.</p>
<pre class="Syntax">ParamObj := ComObjParameter(VarType, Value)</pre>

<p id="type">Retrieves type information for a COM object.</p>
<pre class="Syntax">Name := ComObjType(ComObject, "Name")
IID := ComObjType(ComObject, "IID")</pre>

<h3>Parameters</h3>
<table class="info">
  <tr>
    <td>CLSID</td>
    <td>CLSID or human-readable Prog ID of the COM object to retrieve.</td>
  </tr>
  <tr>
    <td>ComObject</td>
    <td>COM object usable with <a href="../Objects.htm#SyntaxInvoke">object syntax</a>.</td>
  </tr>
  <tr>
    <td>DispPtr</td>
    <td>Raw IDispatch pointer.</td>
  </tr>
  <tr>
    <td>VarType</td>
    <td>An integer indicating the type of value. See <a href="http://msdn.microsoft.com/en-us/library/cc237865.aspx">VARIANT Type Constants (MSDN)</a> for a list of types.</td>
  </tr>
  <tr>
    <td>Value</td>
    <td>The value to wrap. Currently only integer and pointer values are supported.</td>
  </tr>
</table>

<h3 id="Remarks">General Remarks</h3>
<p>ComObjActive is <i>polymorphic</i>; that is, any function-call beginning with "ComObj" that does not match one of the other COM functions actually calls ComObjActive. For example, <code>ComObj(9, DispPtr)</code> and <code>ComObjActive(DispPtr)</code> are both equivalent to <code>ComObjEnwrap(DispPtr)</code>.</p>
<p>When this function is used to wrap an IDispatch pointer, it calls <a href="http://msdn.microsoft.com/en-us/library/ms691379.aspx">AddRef</a> to increment the COM object's reference count. When the last reference to the wrapper object is released, it calls <a href="http://msdn.microsoft.com/en-us/library/ms682317.aspx">Release</a> on the IDispatch pointer. Scripts may use <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a> in place of these interface functions to manage object lifetime. For more detail on this topic, see <a href="http://support.microsoft.com/kb/104138">Reference Counting Rules (MSDN)</a>.</p>
<p><b>Known limitation:</b> Each time a COM object is wrapped, a new wrapper object is created. Comparisons and assignments such as <code>obj1 == obj2</code> and <code>array[obj1] := value</code> treat the two wrapper objects as unique, even though they contain the same COM object.</p>

<h3 id="Related">Related</h3>
<p><a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjConnect.htm">ComObjConnect</a>, <a href="ComObjError.htm">ComObjError</a>, <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>, <a href="http://msdn.microsoft.com/en-us/library/ms221467.aspx">GetActiveObject (MSDN)</a></p>

<h3>Examples</h3>
<p>ComObjUnwrap: See <a href="ComObjConnect.htm#Examples">ComObjConnect</a>.</p>

</body>
</html>
