<!DOCTYPE HTML>
<html lang="en">
<head>
<title>ComObjQuery - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The ComObjQuery function queries a COM object for an interface or service." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjQuery</h1>
<p>Queries a COM object for an interface or service.</p>
<pre class="Syntax">InterfacePointer := <span class="func">ComObjQuery</span>(ComObject, <span class="optional">SID,</span> IID)</pre>

<h2>Parameters</h2>
<dl>

  <dt>ComObject</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#objects">Object</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>A COM wrapper object, an interface pointer, or an object with a <code>Ptr</code> property which returns an interface pointer.</p>
  </dd>

  <dt>IID</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>An interface identifier (GUID) in the form "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}".</p>
  </dd>

  <dt>SID</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>A service identifier in the same form as IID. When omitting this parameter, also omit the comma.</p>
  </dd>

</dl>

<h2>Return Value</h2>
<p>Type: <a href="ComObject.htm#Returns">ComObject</a></p>
<p>This function returns a COM wrapper object with the type VT_UNKNOWN (13).</p>

<h2>Remarks</h2>
<p>In its two-parameter mode, this function is equivalent to <a href="http://msdn.microsoft.com/en-us/library/ms682521.aspx">IUnknown::QueryInterface</a>. When SID and IID are both specified, it internally queries for the <a href="http://msdn.microsoft.com/en-us/library/cc678965.aspx">IServiceProvider</a> interface, then calls <a href="http://msdn.microsoft.com/en-us/library/cc678966.aspx">IServiceProvider::QueryService</a>. In either case, the return value is either zero or a pointer to the requested interface. Generally this pointer must be <a href="ObjAddRef.htm">released</a> when the script is finished with it.</p>
<p><a href="ComCall.htm">ComCall</a> can be used to call native interface methods.</p>

<h2>Related</h2>
<p><a href="ComCall.htm">ComCall</a>, <a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a></p>

<h2>Examples</h2>
<div class="ex" id="ExClassName">
<p><a href="#ExClassName">#1</a>: Determine the class name of an object.</p>
<pre>
obj := ComObjCreate("Scripting.Dictionary")

MsgBox "Interface name: " ComObjType(obj, "name")

IID_IProvideClassInfo := "{B196B283-BAB4-101A-B69C-00AA00341D07}"

<em>; Request the object's IProvideClassInfo interface.</em>
try
    pci := ComObjQuery(obj, IID_IProvideClassInfo)
catch
{
    MsgBox "IProvideClassInfo interface not supported."
    return
}

<em>; Call GetClassInfo to retrieve a pointer to the ITypeInfo interface.</em>
ComCall(3, pci, "ptr*", ti := 0)

<em>; Wrap ti to ensure automatic cleanup.</em>
ti := ComObject(13, ti)

<em>; Call GetDocumentation to get the object's full type name.</em>
ComCall(12, ti, "int", -1, "ptr*", pname := 0, "ptr", 0, "ptr", 0, "ptr", 0)

<em>; Convert the BSTR pointer to a usable string.</em>
name := StrGet(pname, "UTF-16")

<em>; Clean up.</em>
DllCall("oleaut32\SysFreeString", "ptr", pname)
pci := ti := ""

<em>; Display the type name!</em>
MsgBox "Class name: " name
</pre>
</div>

<div class="ex" id="ExIE">
<p><a href="#ExIE">#2</a>: Automate an existing Internet Explorer window.</p>
<pre>sURL := "https://www.autohotkey.com/boards/"
if WebBrowser := GetWebBrowser()
    WebBrowser.Navigate(sURL)
return

GetWebBrowser()
{
    <em>; Get a raw pointer to the document object of the top-most IE window.</em>
    static msg := DllCall("RegisterWindowMessage", "Str", "WM_HTML_GETOBJECT")
    lResult := SendMessage(msg, 0, 0, "Internet Explorer_Server1", "ahk_class IEFrame")
    if !lResult
        return  <em>; IE not found.</em>
    DllCall("oleacc\ObjectFromLresult", "Ptr", lResult
        , "Ptr", GUID(IID_IHTMLDocument2,"{332C4425-26CB-11D0-B483-00C04FD90119}")
        , "Ptr", 0, "Ptr*", pdoc)
    
    <em>; Query for the WebBrowserApp service. In this particular case,
    ; the SID and IID are the same, but it isn't always this way.</em>
    static IID_IWebBrowserApp := "{0002DF05-0000-0000-C000-000000000046}"
    static SID_SWebBrowserApp := IID_IWebBrowserApp
    pweb := ComObjQuery(pdoc, SID_SWebBrowserApp, IID_IWebBrowserApp)
    
    <em>; Release the document object pointer.</em>
    ObjRelease(pdoc)
    
    <em>; Return the WebBrowser object, wrapped for usability:</em>
    static VT_DISPATCH := 9, F_OWNVALUE := 1
    return ComObject(VT_DISPATCH, pweb, F_OWNVALUE)
}

GUID(ByRef GUID, sGUID) <em>; Converts a string to a binary GUID and returns its address.</em>
{
    GUID := BufferAlloc(16, 0)
    return DllCall("ole32\CLSIDFromString", "WStr", sGUID, "Ptr", GUID) &gt;= 0 ? GUID : ""
}
</pre>
</div>

</body>
</html>
