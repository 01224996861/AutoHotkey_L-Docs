<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Process</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/commands.css" rel="stylesheet" type="text/css">
<link href="../css/print.css" rel="stylesheet" type="text/css" media="print">
</head>
<body>

<h1>Process</h1>
<hr size="2">
<p>Performs one of the following operations on a process: checks if it exists; changes its priority; closes it; waits for it to close.</p>

<p class="CommandSyntax">Process, Cmd, PID-or-Name [, Param3]</p>
<h4>Parameters</h4>
<table border="1" width="100%" cellspacing="0" cellpadding="3" bordercolor="#C0C0C0">
  <tr>
    <td width="15%">Cmd</td>
    <td width="85%"><p>One of the following words:</p>
    <p><strong>Exist</strong>: Sets <a href="../misc/ErrorLevel.htm">ErrorLevel</a> to the Process ID (PID) if a matching process exists, or 0 otherwise.  If the <em>PID-or-Name</em> parameter is blank, the script's own PID is retrieved. An alternate, single-line method to retrieve the script's PID is <em>PID := DllCall(&quot;GetCurrentProcessId&quot;)</em></p>
    <p><strong>Close</strong>: If a matching process is successfully terminated, <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to its former Process ID (PID). Otherwise (there was no matching process or there was a problem terminating it), it is set to 0. Since the process will be abruptly terminated -- possibly interrupting its work at a critical point or resulting in the loss of unsaved data in its windows (if it has any) -- this method should be used only if a process cannot be closed by using <a href="WinClose.htm">WinClose</a> on one of its windows.</p>
    <p><strong>List</strong>: Although <em>List</em> is not yet supported, the <a href="#ListEx">examples section</a> demonstrates how to retrieve a list of processes via DllCall.</p>
    <p><strong><a name="Priority"></a>Priority</strong>: Changes the priority (as seen in Windows Task Manager) of the first matching process to <em>Param3</em> and sets <a href="../misc/ErrorLevel.htm">ErrorLevel</a> to its Process ID (PID). If the <em>PID-or-Name</em> parameter is blank, the script's own priority will be changed. If there is no matching process or there was a problem changing its priority, ErrorLevel is set to 0.</p>
    <p><em>Param3</em> should be one of the following letters or words: L (or Low), B (or BelowNormal), N (or Normal), A (or AboveNormal), H (or High), R (or Realtime). Since BelowNormal and AboveNormal are not supported on Windows 95/98/Me/NT4, <em>normal</em> will be automatically substituted for them on those operating systems. Note: Any process not designed to run at Realtime priority might reduce system stability if set to that level.</p>
    <p><strong>Wait</strong>: Waits up to <em>Param3</em> seconds (can contain a decimal point) for a matching process to exist. If <em>Param3</em> is omitted, the command will wait indefinitely. If a matching process is discovered, <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to its Process ID (PID). If the command times out, ErrorLevel is set to 0.</p>
    <p><strong>WaitClose</strong>: Waits up to <em>Param3</em> seconds (can contain a decimal point) for ALL matching processes to close. If <em>Param3</em> is omitted, the command will wait indefinitely. If all matching processes are closed, <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 0. If the command times out, ErrorLevel is set to the Process ID (PID) of the first matching process that still exists. </p></td>
  </tr>
  <tr>
    <td>PID-or-Name </td>
    <td><p>This parameter can be either a number (the PID) or a process name as described below. It can also be left blank to change the priority of the script itself.</p>
      <p>PID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the <a href="Run.htm">Run</a> command. Similarly, the PID of a window can be determined with <a href="WinGet.htm">WinGet</a>. The Process command itself can also be used to discover a PID.</p>
      <p>Name: The name of a process is usually the same as its executable (without path), e.g.


    notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case sensitive.</p></td>
  </tr>
  <tr>
    <td>Param3</td>
    <td>See <em>Cmd</em> above for details.</td>
  </tr>
</table>

<h4>ErrorLevel</h4>
<p>See <em>Cmd</em> above for details.</p>
<h4>Remarks</h4>
<p>For <em>Wait</em> and <em>WaitClose</em>: Processes are checked every 100 milliseconds; the moment the condition is satisfied, the command stops waiting. In other words, rather than waiting for the timeout  to expire, it immediately sets <a href="../misc/ErrorLevel.htm">ErrorLevel </a>as described above, then continues  execution of the script. Also, while the command is in a waiting state, new <a href="../misc/Threads.htm">threads</a> can be launched via <a href="../Hotkeys.htm">hotkey</a>, <a href="Menu.htm">custom menu item</a>, or <a href="SetTimer.htm">timer</a>.</p>
<p> To work under Windows NT4, the Process command requires the file PSAPI.DLL, which is normally already present in the AutoHotkey installation directory (i.e. no extra installation steps should be needed even for NT). However, to use it from within a <a href="../Scripts.htm#ahk2exe">compiled script</a>  on Windows NT4, include a copy of PSAPI.DLL in the same folder as the script or in one of the directories in the system's PATH (though some NT4 systems might already have the DLL).</p>

<h4>Related</h4>
<p><a href="Run.htm">Run</a>, <a href="WinGet.htm">WinGet</a>, <a href="WinClose.htm">WinClose</a>, <a href="WinKill.htm">WinKill</a>, <a href="WinWait.htm">WinWait</a>, <a href="WinWaitClose.htm">WinWaitClose</a>, <a href="IfWinExist.htm">IfWinExist</a></p>
<h4>Examples</h4>
<pre class="NoIndent"><span class="CodeCom">; Example #1:</span>

Run Notepad.exe, , , NewPID
Process, priority, %NewPID%, High
MsgBox The newly launched notepad's PID is %NewPID%.</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><span class="CodeCom">; Example #2:</span>

Process, wait, Notepad.exe, 5.5
NewPID = %ErrorLevel%  <span class="CodeCom">; Save the value immediately since ErrorLevel is often changed.</span>
if NewPID = 0
{
    MsgBox The specified process did not appear within 5.5 seconds.
    return
}
<span class="CodeCom">; Otherwise:</span>
MsgBox A matching process has appeared (Process ID is %NewPID%).
Process, priority, %NewPID%, Low
Process, priority, , High  <span class="CodeCom">; Have the script set itself to high priority.</span>
WinClose Untitled - Notepad
Process, WaitClose, %NewPID%, 5
if ErrorLevel <span class="CodeCom">; The PID still exists.</span>
    MsgBox The process did not close within 5 seconds.</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><span class="CodeCom">; Example #3: A hotkey to change the priority of the active window's process:</span>

#z:: <span class="CodeCom">; Win+Z hotkey</span>
WinGet, active_pid, PID, A
WinGetTitle, active_title, A
Gui, 5:Add, Text,, Press ESCAPE to cancel, or double-click a new`npriority level for the following window:`n%active_title%
Gui, 5:Add, ListBox, vMyListBox gMyListBox r5, Normal|High|Low|BelowNormal|AboveNormal
Gui, 5:Add, Button, default, OK
Gui, 5:Show,, Set Priority
return

5GuiEscape:
5GuiClose:
Gui, Destroy
return

MyListBox:
if A_GuiEvent &lt;&gt; DoubleClick
    return
<span class="CodeCom">; else fall through to the next label:</span>
5ButtonOK:
GuiControlGet, MyListBox
Gui, Destroy
Process, Priority, %active_pid%, %MyListBox%
if ErrorLevel
    MsgBox Success: Its priority was changed to &quot;%MyListBox%&quot;.
else
    MsgBox Error: Its priority could not be changed to &quot;%MyListBox%&quot;.
return</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><a name="ListEx"></a><span class="CodeCom">; Example #4: Retrieves a list of running processes via <a href="DllCall.htm">DllCall</a> then shows them in a MsgBox.</span>

d = `n  <span class="CodeCom">; string separator</span>
s := 4096  <span class="CodeCom">; size of buffers and arrays (4 KB)</span>

Process, Exist  <span class="CodeCom">; sets ErrorLevel to the PID of this running script</span>
<span class="CodeCom">; Get the handle of this script with PROCESS_QUERY_INFORMATION (0x0400)</span>
h := DllCall(&quot;OpenProcess&quot;, &quot;UInt&quot;, 0x0400, &quot;Int&quot;, false, &quot;UInt&quot;, ErrorLevel)
<span class="CodeCom">; Open an adjustable access token with this process (TOKEN_ADJUST_PRIVILEGES = 32)</span>
DllCall(&quot;Advapi32.dll\OpenProcessToken&quot;, &quot;UInt&quot;, h, &quot;UInt&quot;, 32, &quot;UIntP&quot;, t)
VarSetCapacity(ti, 16, 0)  <span class="CodeCom">; structure of privileges</span>
NumPut(1, ti, 0)  <span class="CodeCom">; one entry in the privileges array...</span>
<span class="CodeCom">; Retrieves the locally unique identifier of the debug privilege:</span>
DllCall(&quot;Advapi32.dll\LookupPrivilegeValueA&quot;, &quot;UInt&quot;, 0, &quot;Str&quot;, &quot;SeDebugPrivilege&quot;, &quot;Int64P&quot;, luid)
NumPut(luid, ti, 4, &quot;int64&quot;)
NumPut(2, ti, 12)  <span class="CodeCom">; enable this privilege: SE_PRIVILEGE_ENABLED = 2</span>
<span class="CodeCom">; Update the privileges of this process with the new access token:</span>
DllCall(&quot;Advapi32.dll\AdjustTokenPrivileges&quot;, &quot;UInt&quot;, t, &quot;Int&quot;, false, &quot;UInt&quot;, &amp;ti, &quot;UInt&quot;, 0, &quot;UInt&quot;, 0, &quot;UInt&quot;, 0)
DllCall(&quot;CloseHandle&quot;, &quot;UInt&quot;, h)  <span class="CodeCom">; close this process handle to save memory</span>

hModule := DllCall(&quot;LoadLibrary&quot;, &quot;Str&quot;, &quot;Psapi.dll&quot;)  <span class="CodeCom">; increase performance by preloading the libaray</span>
s := VarSetCapacity(a, s)  <span class="CodeCom">; an array that receives the list of process identifiers:</span>
c := 0  <span class="CodeCom">; counter for process idendifiers</span>
DllCall(&quot;Psapi.dll\EnumProcesses&quot;, &quot;UInt&quot;, &amp;a, &quot;UInt&quot;, s, &quot;UIntP&quot;, r)
Loop, % r // 4  <span class="CodeCom">; parse array for identifiers as DWORDs (32 bits):</span>
{
   id := NumGet(a, A_Index * 4)
   <span class="CodeCom">; Open process with: PROCESS_VM_READ (0x0010) | PROCESS_QUERY_INFORMATION (0x0400)</span>
   h := DllCall(&quot;OpenProcess&quot;, &quot;UInt&quot;, 0x0010 | 0x0400, &quot;Int&quot;, false, &quot;UInt&quot;, id)
   VarSetCapacity(n, s, 0)  <span class="CodeCom">; a buffer that receives the base name of the module:</span>
   e := DllCall(&quot;Psapi.dll\GetModuleBaseNameA&quot;, &quot;UInt&quot;, h, &quot;UInt&quot;, 0, &quot;Str&quot;, n, &quot;UInt&quot;, s)
   DllCall(&quot;CloseHandle&quot;, &quot;UInt&quot;, h)  <span class="CodeCom">; close process handle to save memory</span>
   if (n &amp;&amp; e)  <span class="CodeCom">; if image is not null add to list:</span>
      l .= n . d, c++
}
DllCall(&quot;FreeLibrary&quot;, &quot;UInt&quot;, hModule)  <span class="CodeCom">; unload the library to free memory</span>
<span class="CodeCom">;Sort, l, C  ; uncomment this line to sort the list alphabetically</span>
MsgBox, 0, %c% Processes, %l%</pre>

</body>
</html>
