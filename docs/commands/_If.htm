<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>#If</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>


<h1>#If</h1>

<p>Creates context-sensitive <a href="../Hotkeys.htm">hotkeys</a> and <a href="../Hotstrings.htm">hotstrings</a>. Such hotkeys perform a different action (or none at all) depending on the result of an expression. Available in AutoHotkey_L only.</p>

<pre class="Syntax">#If [, Expression ]</pre>
<h3>Parameters</h3>
<table class="info">
  <tr>
    <td>Expression</td>
    <td>Any valid <a href="../Variables.htm#Expressions">expression</a>.</td>
  </tr>
</table>

<h3>Basic Operation</h3>
<p>Any valid expression may be used to define the context in which a hotkey should be active. For example:</p>
<pre>#If WinActive("ahk_class Notepad") or WinActive(MyWindowTitle)
#Space::MsgBox You pressed Win+Spacebar in Notepad or %MyWindowTitle%.</pre>
<p>Like the #IfWin directives, #If is positional: it affects all hotkeys and hotstrings physically beneath it in the script. #If and #IfWin are also mutually exclusive; that is, only the most recent #If or #IfWin will be in effect.</p>
<p>To turn off context sensitivity, specify #If or any #IfWin directive but omit all the parameters. For example:</p>
<pre>#If</pre>
<h3>General Remarks</h3>
<p>When the key combination which forms a hotkey is pressed, the #If expression is evaluated to determine if the hotkey should activate. The system may not respond to keyboard input until expression evaluation completes or <a href="_IfTimeout.htm">times out</a>.</p>
<p>Due to a design quirk of AutoHotkey, #If expressions may be evaluated twice under certain circumstances. For this reason, #If expressions should be designed to have no side-effects.</p>
<h3>Related</h3>
<p>Most behavioural properties of the <a href="_IfWinActive.htm">#IfWin</a> directives also apply to #If.</p>
<p><a href="_IfTimeout.htm">#IfTimeout</a> may be used to override the default timeout value.</p>
<p>To create context-sensitive hotkeys with the <a href="Hotkey.htm">Hotkey</a> command, select an existing #If expression with <em>Hotkey, If, Expression</em>. Expression must exactly match the text of an existing #If expression, excluding "#If". The comma following "If" is required. See Example 4 below.</p>
<h3>Examples</h3>
<pre class="NoIndent">
<em>; Example 1: Adjust volume by scrolling the mouse wheel over the taskbar.</em>
#If MouseIsOver("ahk_class Shell_TrayWnd")
WheelUp::Send {Volume_Up}
WheelDown::Send {Volume_Down}

MouseIsOver(WinTitle) {
    MouseGetPos,,, Win
    return WinExist(WinTitle . " ahk_id " . Win)
}

<em>; Example 2: Simple word-delete shortcuts for all Edit controls.</em>
#If ActiveControlIsOfClass("Edit")
^BS::Send ^+{Left}{Del}
^Del::Send ^+{Right}{Del}

ActiveControlIsOfClass(Class) {
    ControlGetFocus, FocusedControl, A
    ControlGet, FocusedControlHwnd, Hwnd,, %FocusedControl%, A
    WinGetClass, FocusedControlClass, ahk_id %FocusedControlHwnd%
    return (FocusedControlClass=Class)
}

<em>; Example 3: Context-insensitive hotkey.</em>
#If
Esc::ExitApp

<em>; Example 4: Dynamic hotkeys.</em>
NumpadAdd::
Hotkey, If, MouseIsOver("ahk_class Shell_TrayWnd")
if (doubleup := !doubleup)
    Hotkey, WheelUp, DoubleUp
else
    Hotkey, WheelUp, WheelUp
return

DoubleUp:
Send {Volume_Up 2}
return
</pre>

</body>
</html>
