<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Remapping a Joystick to Keyboard or Mouse</title>
<meta name="description" content="Have your joystick send keystrokes and mouse clicks with this free macro program. It also allows a joystick to be used as a mouse.">
<meta name="keywords" content="keyboard,keys,key,keystrokes,clicks,mouse,buttons,button,joystick,hotkeys,hotkey,macro">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="../../forum/rss.php">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<link href="../css/print.css" rel="stylesheet" type="text/css" media="print">
</head>
<body>

<h1>Remapping a Joystick to Keyboard or Mouse</h1>
<hr>

<h2>Table of Contents</h2>
<ul>
  <li><a href="#imp">Important Notes</a></li>
  <li><a href="#button">Making a Joystick Button Send Keystrokes or Mouse Clicks</a></li>
  <li><a href="#axis">Making a Joystick Axis or POV Hat Send Keystrokes or Mouse Clicks</a></li>
  <li><a href="#Remarks">Remarks</a></li>
</ul>
<h2><a name="imp"></a>Important Notes</h2>
<ul>
  <li>Although a joystick button or axis can be remapped to become a key or mouse button, it cannot be remapped to some other joystick button or axis. That would be possible only with the help of a joystick emulator such as <a href="http://www.geocities.com/deonvdw/Docs/PPJoyMain.htm">PPJoy</a>.</li>
  <li>AutoHotkey identifies each button on a joystick with a unique number between 1 and 32. To determine these numbers, use the <a href="../scripts/JoystickTest.htm">joystick test script</a>.</li>
</ul>
<h2><a name="button"></a>Making a Joystick Button Send Keystrokes or Mouse Clicks</h2>
<p>Below are three approaches, starting at the simplest and ending with the most complex. The most complex method works in the broadest variety of circumstances (such as games that require a key or mouse button to be held down).</p>
<p><strong> Method #1</strong>: This method sends simple keystrokes and mouse clicks. For example:</p>
<pre>Joy1::<a href="../commands/Send.htm">Send</a> {Left}  <span class="CodeCom">; Have button #1 send a left-arrow keystroke.</span>
Joy2::<a href="../commands/Click.htm">Click</a>  <span class="CodeCom">; Have button #2 send a click of left mouse button.</span>
Joy3::Send a{Esc}{Space}{Enter}  <span class="CodeCom">; Have button #3 send the letter &quot;a&quot; followed by Escape, Space, and Enter.</span>
Joy4::Send Sincerely,{Enter}John Smith  <span class="CodeCom">; Have button #4 send a two-line signature.</span></pre>
<p>To have a button perform more than one command, put the first command <em>beneath</em> the button name and make the last command a <a href="../commands/Return.htm">return</a>. For example:</p>
<pre>Joy5::
Run Notepad
WinWait Untitled - Notepad
WinActivate
Send This is the text that will appear in Notepad.{Enter}
return</pre>
<p>See the <a href="../KeyList.htm">Key List</a> for the complete list of keys and mouse/joystick buttons.</p>
<p><strong><br>
Method #2</strong>: This method is necessary in cases where a key or mouse button must be held down for the entire time that you're holding down a joystick button. The following example makes the joystick's second button become the left-arrow key:</p>
<pre>Joy2::
Send {Left down}  <span class="CodeCom">; Hold down the left-arrow key.</span>
<a href="../commands/KeyWait.htm">KeyWait</a> Joy2  <span class="CodeCom">; Wait for the user to release the joystick button.</span>
Send {Left up}  <span class="CodeCom">; Release the left-arrow key.</span>
return</pre>
<p><br>
  <strong> Method #3</strong>: This method is necessary in cases where you have more than one joystick hotkey of the type described in Method #2, and you sometimes press and release such hotkeys simultaneously. The following example makes the joystick's third button become the left mouse button:</p>
<pre>Joy3::
Send {LButton down}   <span class="CodeCom">; Hold down the left mouse button.</span>
SetTimer, WaitForButtonUp3, 10
return

WaitForButtonUp3:
if <a href="../Functions.htm#GetKeyState">GetKeyState</a>(&quot;Joy3&quot;)  <span class="CodeCom">; The button is still, down, so keep waiting.</span>
    return
<span class="CodeCom">; Otherwise, the button has been released.</span>
Send {LButton up}  <span class="CodeCom">; Release the left mouse button.</span>
SetTimer, WaitForButtonUp3, off
return
</pre>
<p><strong><br>
Auto-repeating a keystroke</strong>: Some programs or games might require a key to be sent repeatedly (as though you are holding it down on the keyboard). The following example achieves this by sending spacebar keystrokes repeatedly while you hold down the joystick's second button:</p>
<pre>Joy2::
Send {Space down}   <span class="CodeCom">; Press the spacebar down.</span>
SetTimer, WaitForJoy2, <strong>30</strong>  <span class="CodeCom">; Reduce the number <strong>30</strong> to 20 or 10 to send keys faster. Increase it to send slower.</span>
return

WaitForJoy2:
if not GetKeyState(&quot;Joy2&quot;)  <span class="CodeCom">; The button has been released.</span>
{
    Send {Space up}  <span class="CodeCom">; Release the spacebar.</span>
    SetTimer, WaitForJoy2, off  <span class="CodeCom">; Stop monitoring the button.</span>
    return
}
<span class="CodeCom">; Since above didn't &quot;return&quot;, the button is still being held down.</span>
Send {Space down}  <span class="CodeCom">; Send another Spacebar keystroke.</span>
return</pre>
<p><strong>Context-sensitive Joystick Buttons</strong>: The directives <a href="../commands/_IfWinActive.htm">#IfWinActive/Exist</a> can be used to make selected joystick buttons perform a different action (or none at all) depending on the type of window that is active or exists.</p>
<p><strong>Using a Joystick as a Mouse</strong>: The <a href="../scripts/JoystickMouse.htm">Joystick-To-Mouse script</a> converts a joystick into a mouse by remapping its buttons and axis control.</p>
<h2><a name="axis"></a>Making a Joystick Axis or POV Hat Send Keystrokes or Mouse Clicks</h2>
<p>To have a script respond to movement of a joystick's axis or POV hat, use <a href="../commands/SetTimer.htm">SetTimer</a> and <a href="../commands/GetKeyState.htm">GetKeyState</a>. The following example makes the joystick's X and Y axes behave like the arrow key cluster on a keyboard (left, right, up, and down):</p>
<pre>#Persistent  <span class="CodeCom">; Keep this script running until the user explicitly exits it.</span>
<a href="../commands/SetTimer.htm">SetTimer</a>, WatchAxis, 5
return

WatchAxis:
<a href="../commands/GetKeyState.htm">GetKeyState</a>, JoyX, JoyX  <span class="CodeCom">; Get position of X axis.</span>
GetKeyState, JoyY, JoyY  <span class="CodeCom">; Get position of Y axis.</span>
KeyToHoldDownPrev = %KeyToHoldDown%  <span class="CodeCom">; Prev now holds the key that was down before (if any).</span>

if JoyX &gt; 70
    KeyToHoldDown = Right
else if JoyX &lt; 30
    KeyToHoldDown = Left
else if JoyY &gt; 70
    KeyToHoldDown = Down
else if JoyY &lt; 30
    KeyToHoldDown = Up
else
    KeyToHoldDown =

if KeyToHoldDown = %KeyToHoldDownPrev%  <span class="CodeCom">; The correct key is already down (or no key is needed).</span>
    return  <span class="CodeCom">; Do nothing.</span>

<span class="CodeCom">; Otherwise, release the previous key and press down the new key:</span>
SetKeyDelay -1  <span class="CodeCom">; Avoid delays between keystrokes.</span>
if KeyToHoldDownPrev   <span class="CodeCom">; There is a previous key to release.</span>
    Send, {%KeyToHoldDownPrev% up}  <span class="CodeCom">; Release it.</span>
if KeyToHoldDown   <span class="CodeCom">; There is a key to press down.</span>
    Send, {%KeyToHoldDown% down}  <span class="CodeCom">; Press it down.</span>
return</pre>
<p>&nbsp;</p>
<p>The following example makes the joystick's POV hat behave like the arrow key cluster on a keyboard; that is, the POV hat will send arrow keystrokes (left, right, up, and down):</p>
<pre>#Persistent  <span class="CodeCom">; Keep this script running until the user explicitly exits it.</span>
SetTimer, WatchPOV, 5
return

WatchPOV:
GetKeyState, POV, JoyPOV  <span class="CodeCom">; Get position of the POV control.</span>
KeyToHoldDownPrev = %KeyToHoldDown%  <span class="CodeCom">; Prev now holds the key that was down before (if any).</span>

<span class="CodeCom">; Some joysticks might have a smooth/continous POV rather than one in fixed increments.</span>
<span class="CodeCom">; To support them all, use a range:</span>
if POV &lt; 0   <span class="CodeCom">; No angle to report</span>
    KeyToHoldDown =
else if POV &gt; 31500                 <span class="CodeCom">; 315 to 360 degrees: Forward</span>
    KeyToHoldDown = Up
else if POV between 0 and 4500      <span class="CodeCom">; 0 to 45 degrees: Forward</span>
    KeyToHoldDown = Up
else if POV between 4501 and 13500  <span class="CodeCom">; 45 to 135 degrees: Right</span>
    KeyToHoldDown = Right
else if POV between 13501 and 22500 <span class="CodeCom">; 135 to 225 degrees: Down</span>
    KeyToHoldDown = Down
else                                <span class="CodeCom">; 225 to 315 degrees: Left</span>
    KeyToHoldDown = Left

if KeyToHoldDown = %KeyToHoldDownPrev%  <span class="CodeCom">; The correct key is already down (or no key is needed).</span>
    return  <span class="CodeCom">; Do nothing.</span>

<span class="CodeCom">; Otherwise, release the previous key and press down the new key:</span>
SetKeyDelay -1  <span class="CodeCom">; Avoid delays between keystrokes.</span>
if KeyToHoldDownPrev   <span class="CodeCom">; There is a previous key to release.</span>
    Send, {%KeyToHoldDownPrev% up}  <span class="CodeCom">; Release it.</span>
if KeyToHoldDown   <span class="CodeCom">; There is a key to press down.</span>
    Send, {%KeyToHoldDown% down}  <span class="CodeCom">; Press it down.</span>
return</pre>
<p>&nbsp;</p>
<p><strong>Auto-repeating a keystroke</strong>: Both examples above can be modified to send the key repeatedly rather than merely holding it down (that is, they can mimic physically holding down a key on the keyboard). To do this, replace the following line:</p>
<pre>return  <span class="CodeCom">; Do nothing.</span></pre>
<p>WITH:</p>
<pre>{
    if KeyToHoldDown
        Send, {%KeyToHoldDown% down}  <span class="CodeCom">; Auto-repeat the keystroke.</span>
    return
}</pre>
<h2><a name="Remarks"></a>Remarks</h2>
<p>A joystick other than first may be used by preceding the button or axis name with the number of the joystick. For example, 2Joy1 would be the second joystick's first button.</p>
<p>To find other useful joystick scripts, visit the <a href="http://www.autohotkey.com/forum/">AutoHotkey forum</a>. A keyword search such as <em>Joystick and GetKeyState and Send</em> is likely to produce topics of interest.</p>
<h2>Related Topics</h2>
<p><a href="../scripts/JoystickMouse.htm">Joystick-To-Mouse script (using a joystick as a mouse)</a><br>
<a href="../KeyList.htm#Joystick">List of joystick buttons, axes, and controls</a><br>
<a href="../commands/GetKeyState.htm">GetKeyState</a><br>
<a href="Remap.htm">Remapping the keyboard and mouse</a></p>
</body>
</html>
