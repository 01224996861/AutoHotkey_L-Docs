<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>File Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>File Object <span class="ver">[AHK_L 42+]</span></h1>

<p>Provides an interface for file input/output. <a href="../commands/FileOpen.htm">FileOpen</a> returns an object of this type.</p>

<div class="methodShort" id="Read"><h2>Read</h2>
<p>Reads the specified number of characters from the file and advances the file pointer.</p>
<pre class="Syntax">String := File.Read(Characters)</pre>
<table class="info">
  <tr><td width="15%">Characters</td><td width="85%">Number of characters to read.</td></tr>
  <tr><td><b>Returns</b></td><td>A string of <i>up to</i> the specified number of characters.</td></tr>
</table></div>

<div class="methodShort" id="ReadLine"><h2>ReadLine</h2>
<p>Reads a line from the file and advances the file pointer.</p>
<pre class="Syntax">Line := File.ReadLine()</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">A line of text.  This may include <code>`n</code>, <code>`r`n</code> or <code>`r</code> depending on the file and EOL flags used to open the file.</td></tr>
</table></div>

<div class="methodShort" id="Write"><h2>Write</h2>
<p>Writes a string to the file.</p>
<pre class="Syntax">File.Write(String)</pre>
<table class="info">
  <tr><td width="15%">String</td><td width="85%">A string.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of <b>bytes</b> (not characters) that have been written. </td></tr>
</table></div>

<div class="methodShort" id="RawRead"><h2>RawRead</h2>
<p>Read raw binary data from the file.  Callers must ensure that the target is large enough to hold the data (see <a href="../commands/VarSetCapacity.htm">VarSetCapacity</a>).</p>
<pre class="Syntax">File.RawRead(VarOrAddress, Bytes)</pre>
<table class="info">
  <tr><td width="15%">VarOrAddress</td><td width="85%">A variable or memory address to which the data will be copied.  Usage is similar to <a href="../Functions.htm#NumGet">NumGet</a>.</td></tr>
  <tr><td>Bytes</td><td>The maximum number of bytes to read.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of bytes that have been read.</td></tr>
</table></div>

<div class="methodShort" id="RawWrite"><h2>RawWrite</h2>
<p>Write raw binary data to the file.</p>
<pre class="Syntax">File.RawWrite(VarOrAddress, Bytes)</pre>
<table class="info">
  <tr><td width="15%">VarOrAddress</td><td width="85%">A variable or memory address from which the data will be copied.  Usage is similar to <a href="../Functions.htm#NumPut">NumPut</a>.</td></tr>
  <tr><td>Bytes</td><td>The number of bytes to write.</td></tr>
  <tr><td><b>Returns</b></td><td>The number of bytes that have been written.</td></tr>
</table></div>

<div class="methodShort" id="Seek"><h2>Seek</h2>
<p>Moves the file pointer.</p>
<pre class="Syntax">File.Seek(Distance [, Origin = 0])</pre>
<table class="info">
  <tr><td width="15%">Distance</td><td width="85%">The length in bytes to move.  Negative values reverse the direction.</td></tr>
  <tr><td>Origin</td><td>Specifies the meaning of the <i>Distance</i> parameter; must be one of the following values:<ul>
      <li>0 (SEEK_SET): Relative to the beginning of the file.</li>
      <li>1 (SEEK_CUR): Relative to the current position of the file pointer.</li>
      <li>2 (SEEK_END): Relative to the end of the file.</li>
    </ul></td></tr>
  <tr><td><b>Returns</b></td><td>A non-zero value if successful, otherwise zero. </td></tr>
</table></div>

<div class="methodShort" id="Tell"><h2>Tell</h2>
<pre class="Syntax">Pos := File.Tell()</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">The current position of the file pointer.</td></tr>
</table></div>

<div class="methodShort" id="Length"><h2>Length</h2>
<p>Retrieves or sets the size of the file.</p>
<pre class="Syntax">FileSize := File.Length([NewSize])</pre>
<table class="info">
  <tr><td width="15%">NewSize</td><td width="85%">If specified, the file will be resized to <i>NewSize</i> bytes.</td></tr>
  <tr><td><b>Returns</b></td><td>The size of the file.</td></tr>
</table></div>

<div class="methodShort" id="AtEOF"><h2>AtEOF</h2>
<pre class="Syntax">IsAtEOF := File.AtEOF()</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">A non-zero value if the file pointer has reached the end of the file, otherwise zero.</td></tr>
</table></div>

<div class="methodShort" id="Close"><h2>Close</h2>
<p>Closes the file, flushes any data in the cache to disk and releases the share locks.  Although the file is closed automatically when the object is freed, it is recommended to close the file as soon as possible.</p>
<pre class="Syntax">File.Close()</pre>
<p><i>No parameters or return value.</i></p></div>

<div class="methodShort" id="__Handle"><h2>__Handle</h2>
<pre class="Syntax">File.__Handle()</pre>
<table class="info">
  <tr><td width="15%"><b>Returns</b></td><td width="85%">A system file handle, intended for use with DllCall. See <a href="http://msdn.microsoft.com/en-us/library/aa363858.aspx">CreateFile</a>.</td></tr>
</table></div>

</body>
</html>
