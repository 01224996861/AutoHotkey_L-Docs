<!DOCTYPE HTML>
<html>
<head>
<title>GuiControl Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiControl Object</h1>
<p>Provides an interface for modifying GUI controls and retrieving information about them. <a href="Gui.htm#Add">Gui.Add</a>, <a href="Gui.htm#Control">Gui.Control</a>,&nbsp;<a href="../commands/GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a> and <a href="Gui.htm#_NewEnum">Gui._NewEnum</a> returns an object of this type.</p>
<h4 id="Quick_Reference">Quick Reference:</h4>
<ul>
  <li><a href="#Type">Type</a>: Retrieves the type of the control. (Not implemented yet)</li>
  <li><a href="#Hwnd">Hwnd</a>: Retrieves the HWND of the control.</li>
  <li><a href="#Name">Name</a>: Retrieves or sets the explicit name of the control.</li>
  <li><a href="#ClassNN">ClassNN</a>: Retrieves the ClassNN of the control.</li>
  <li><a href="#Gui">Gui</a>: Retrieves the control's GUI parent.</li>
  <li><a href="#Event">Event</a>: Retrieves or sets the control's event handler.</li>
  <li><a href="#Opt">Opt</a>: Sets various options and styles for the appearance and behavior of the control.</li>
  <li><a href="#Move">Move</a>: Moves and/or resizes the control. </li>
  <li><a href="#Focus">Focus</a>: Sets keyboard focus to the control.</li>
  <li><a href="#Choose">Choose</a>: Sets the selection in the control to be the specified value.</li>
  <li><a href="#UseTab">UseTab</a>: Causes the control to be belong to the specified tab.</li>
  <li><a href="#Value">Value</a>: Retrieves or sets new contents into the control.</li>
  <li><a href="#Text">Text</a>: Retrieves or sets the text/caption of the control unconditionally.</li>
  <li><a href="#Enabled">Enabled</a>: Retrieves the current interaction state of the control, or enables or disables (grays out) it.</li>
  <li><a href="#Visible">Visible</a>: Retrieves the current visibility state of the control, or shows or hides it.</li>
  <li><a href="#Pos">Pos</a>: Retrieves the position and size of the control.</li>
</ul>

<div class="methodShort" id="Type">
<h2>Type</h2>
<p>Retrieves the type of the control. (Not implemented yet)</p>
<pre class="Syntax">Type := GuiCtrl.Type</pre>
</div>

<div class="methodShort" id="Hwnd">
<h2>Hwnd</h2>
<p>Retrieves the window handle (HWND) of the control. </p>
<pre class="Syntax">Hwnd := GuiCtrl.Hwnd</pre>
<p>A control's HWND is often used with <a href="../commands/PostMessage.htm">PostMessage</a>, <a href="../commands/PostMessage.htm">SendMessage</a>, and <a href="../commands/DllCall.htm">DllCall</a>.</p>
</div>

<div class="methodShort" id="Name">
<h2>Name</h2>
<p>Retrieves or sets the <a href="Gui.htm#var">associated name</a> of the control.</p>
<pre class="Syntax">RetrievedName := GuiCtrl.Name</pre>
<pre class="Syntax">GuiCtrl.Name := NewName</pre>
</div>

<div class="methodShort" id="ClassNN">
<h2>ClassNN</h2>
<p>Retrieves the ClassNN of the control.</p>
<pre class="Syntax">ClassNN := GuiCtrl.ClassNN</pre>
</div>

<div class="methodShort" id="Gui">
<h2>Gui</h2>
<p>Retrieves the <a href="Gui.htm">Gui object</a> of the control's parent GUI window.</p>
<pre class="Syntax">GuiObj := GuiCtrl.Gui</pre>
</div>

<div class="methodShort" id="Event">
<h2>Event</h2>
<p>Retrieves or sets the control's event handler, which can be either a function/method name or an arbitrary callable object. See <a href="Gui.htm#label">g-label</a> for details.</p>
<pre class="Syntax">RetrievedEventHandler := GuiCtrl.Event</pre>
<pre class="Syntax">GuiCtrl.Event := NewEventHandler </pre>
</div>

<div class="methodShort" id="Opt">
<h2>Opt</h2>
<p>Adds or removes various options and styles of the control.</p>
<pre class="Syntax">GuiCtrl.Opt(Options)
GuiCtrl.Options(Options)</pre>
<dl>
  <dt>Options</dt><dd>Either  <a href="../commands/GuiControls.htm">control-specific</a> or <a href="Gui.htm#OtherOptions">general</a> options and styles.</dd>
</dl>
<p>In the following example, the <a href="Gui.htm#AltSubmit">AltSubmit</a> option is enabled but control's <a href="Gui.htm#label">g-label</a> is removed:</p>
<pre>MyListBox.Opt("+AltSubmit -g")</pre>
<p>In the next example, the OK button is made the new default button:</p>
<pre>OKButton.Opt("+Default")</pre>
<p>Although <a href="../misc/Styles.htm">styles</a> and extended styles are also recognized, some of them cannot be applied or removed after a control has been created. ErrorLevel is set to 0 if at least one of the specified changes was successfully applied. Otherwise, it is set to 1 to indicate that none of the changes could be applied. Even if a change is successfully applied, the control might choose to ignore it.</p>
<!--<p id="Functor">To set a <a href="../objects/Functor.htm">function object</a> for handling <a href="Gui.htm#label">the control's events</a>, <em>Param3</em> must be a single variable reference, as in either of the following examples. Other expressions which return objects are currently unsupported.</p>
<pre>GuiControl +g, <i>ControlID</i>, %FuncObj%
GuiControl +g, <i>ControlID</i>, % FuncObj</pre>-->
</div>

<div class="methodShort" id="Move">
<h2>Move</h2>
<p>Moves and/or resizes the control, optionally with drawing it again. </p>
<pre class="Syntax">GuiCtrl.Move(Pos [, Draw := false])</pre>
<dl>
  <dt>Pos</dt><dd><p>One or more of the following option letters (specify each number as decimal, not hexadecimal):</p>
  <p><strong>Xn</strong>: Specify for <strong>n</strong> the new x-coordinate relative to the GUI window's client area, which is the area not including title bar, menu bar, and borders.</p>
  <p><strong>Yn</strong>: Specify for <strong>n</strong> the new y-coordinate relative to the GUI window's client area (see above).</p>
  <p><strong>Wn</strong>: Specify for <strong>n</strong> the new width of the control.</p>
  <p><strong>Hn</strong>: Specify for <strong>n</strong> the new height of the control.</p></dd>
  <dt>Draw</dt><dd>If this parameter is true, the region of the GUI window occupied by the control will be repaint. Although this may cause an unwanted flickering effect when called repeatedly and rapidly, it solves painting artifacts for certain control types such as <a href="../commands/GuiControls.htm#GroupBox">GroupBoxes</a>.</dd>
</dl>
<h4>Examples</h4>
<pre>MyEdit.Move("x10 y20 w200 h100", true)
MyEdit.Move("x%VarX+10% y%VarY+5% w%VarW*2% h%VarH*1.5%")</pre>
</div>

<div class="methodShort" id="Focus">
<h2>Focus</h2>
<p>Sets keyboard focus to the control.</p>
<pre class="Syntax">GuiCtrl.Focus()</pre>
<p>Note: To be effective, the window generally must not be minimized or hidden.</p>
</div>

<div class="methodShort" id="Choose">
<h2>Choose</h2>
<p>Sets the selection in a ListBox, DropDownList, ComboBox, or Tab control to be the Nth entry.</p>
<pre class="Syntax">GuiCtrl.Choose(N [, AdditionalActions := 0])</pre>
<dl>
  <dt>N</dt><dd>This parameter should be 1 for the first entry, 2 for the second, etc. If <em>N</em> is not an integer, the entry whose leading part matches <em>N</em> will be selected. The search is not case sensitive. For example, if a the control contains the item "UNIX Text", specifying the word unix (lowercase) would be enough to select it. If <em>N</em> is zero, the current selection is removed.</dd>
  <dt>AdditionalActions</dt><dd><p>If this parameter is 1, the method will trigger any <a href="Gui.htm#label">g-label</a> associated with the control, like  <a href="../commands/Control.htm">Control Choose</a>. However, the g-label is triggered only when the new selection is different than the old one, at least for <a href="../commands/GuiControls.htm#Tab">Tab controls</a>. For example: <code>MyListBox.Choose(3, 1)</code>.</p>
  <p>If this parameter is 2,  a finishing event occurs (a double-click in the case of ListBox). Tab controls are not supported.</p></dd>
</dl>
<p>To select or deselect <u>all</u> items in a <a href="../commands/GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, follow this example:</p>
<pre>Gui.Opt("+LastFound")  <em>; Avoids the need to specify WinTitle below.</em>
<a href="../commands/PostMessage.htm">PostMessage</a>, 0x185, 1, -1, % ListBox.ClassNN  <em>; Select all items. 0x185 is LB_SETSEL.</em>
<a href="../commands/PostMessage.htm">PostMessage</a>, 0x185, 0, -1, % ListBox.ClassNN  <em>; Deselect all items.</em>
ListBox.Choose(0)  <em>; Deselect all items.</em></pre>
</div>

<div class="methodShort" id="UseTab">
<h2>UseTab</h2>
<p>Causes subsequently added controls to be belong to the specified tab. Requires the GuiControl object of a <a href="../commands/GuiControls.htm#Tab">tab control</a>.</p>
<pre class="Syntax">GuiCtrl.UseTab([Value, ExactMatch := false])</pre>
<dl>
  <dt>Value</dt><dd>If this parameter is a pure integer, it is a tab index; otherwise it is text.</dd>
  <dt>ExactMatch</dt><dd>If this parameter is true, <em>Value</em> has to be an exact match.</dd>
</dl>
<p>Note: Omit all parameters to stop adding controls inside this Tab control.</p>
</div>

<div class="methodShort" id="Value">
<h2>Value</h2>
<p>Retrieves or sets new contents into the control, depending of its type.</p>
<pre class="Syntax">RetrievedValue := GuiCtrl.Value</pre>
<pre class="Syntax">GuiCtrl.Value := NewValue</pre>

<h4><a href="../commands/GuiControls.htm#Picture">Picture</a></h4>
<p><em>RetrievedValue</em> is the picture's file name as it was originally specified when the control was created. This name does not change even if a new picture file name is specified.</p>
<p><em>NewValue</em> is the filename (or <a href="../misc/ImageHandles.htm">handle</a>) of the new image to load (see <a href="../commands/GuiControls.htm#Picture">Picture</a> for supported file types). Zero or more of the following options may be specified immediately in front of the filename: <code>*wN</code> (width N), <code>*hN</code> (height N), and <code>*IconN</code> (icon group number N in a DLL or EXE file).  In the following example, the default icon from the second icon group is loaded with a width of 100 and an automatic height via "keep aspect ratio": <code>MyPic.Value("*icon2 *w100 *h-1 C:\My Application.exe")</code>. Specify <code>*w0 *h0</code> to use the image's actual width and height. If <code>*w</code> and <code>*h</code> are omitted, the image will be scaled to fit the current size of the control. When loading from a multi-icon .ICO file, specifying a width and height also determines which icon to load. Note: Use only one space or tab between the final option and the filename itself; any other spaces and tabs are treated as part of the filename.</p>

<h4><a href="../commands/GuiControls.htm#Text">Text</a> / <a href="../commands/GuiControls.htm#Button">Button</a> / <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a></h4>
<p><em>RetrievedValue</em> is the text/caption of the control.</p>
<p><em>NewValue</em> is the control's new text. Since the control will not expand automatically, use <code>GuiCtrl.<a href="#Move">Move</a>("w300")</code> if the control needs to be widened.</p>

<h4><a href="../commands/GuiControls.htm#Edit">Edit</a></h4>
<p><em>RetrievedValue</em> is the contents but any line breaks in the text will be represented as plain linefeeds (`n) rather than the traditional CR+LF (`r`n) used by non-GUI commands such as <a href="../commands/ControlGetText.htm">ControlGetText</a> and <a href="../commands/ControlSetText.htm">ControlSetText</a>.</p>
<p><em>NewValue</em> is the new content. Any linefeeds (`n) in <em>NewValue</em> that lack a preceding carriage return (`r) are automatically translated to CR+LF (`r`n) to make them display properly. However, this is usually not a concern because when using <code>Gui.Submit()</code> or when retrieving this value this translation will be reversed automatically by replacing CR+LF with LF (`n).</p>

<h4><a href="../commands/GuiControls.htm#Hotkey">Hotkey</a></h4>
<p><em>RetrievedValue</em> is the modifiers and key name if there is a hotkey in the control; otherwise blank. Examples: <code>^!C</code>, <code>^Home</code>, <code>+^NumpadHome</code>.</p>
<p><em>NewValue</em> can be a set of modifiers with a key name, or blank to clear the control. Examples: <code>^!c</code>, <code>^Numpad1</code>, <code>+Home</code>. The only modifiers supported are ^ (Control), ! (Alt), and + (Shift). See the <a href="../KeyList.htm">key list</a> for available key names.</p>

<h4><a href="../commands/GuiControls.htm#Checkbox">Checkbox</a> / <a href="../commands/GuiControls.htm#Radio">Radio</a></h4>
<p><em>RetrievedValue</em> is 1 if the control is checked, 0 if it is unchecked, or -1 if it has a gray checkmark. To retrieve the control's text/caption instead, use <strong>GuiCtrl.Text</strong>.</p>
<p><em>NewValue</em> can be 0 to uncheck the button, 1 to check it, or -1 to give it a gray checkmark. Otherwise, <em>NewValue </em>is assumed to be the control's new caption/text. See <strong>GuiCtrl.Text</strong> below for how to override this behavior. For Radio buttons,  if one is being checked (turned on) and it is a member of a multi-radio group, the other radio buttons in its group will be automatically unchecked. <!--To check a new button within a radio group that only has one variable, specify for <em>ControlID</em> the name/text of the button if it is not the button with which the variable is directly associated.--></p>

<h4><a href="../commands/GuiControls.htm#DateTime">DateTime</a> / <a href="../commands/GuiControls.htm#MonthCal">MonthCal</a></h4>
<p><em>RetrievedValue</em> is a date-time stamp in <a href="../commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format.</p>
<p><em>NewValue</em> is a date-time stamp in <a href="../commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format. Specify <code>%A_Now%</code> to use the current date and time (today). For DateTime controls, <em>NewValue</em> may be omitted to cause the control to have no date/time selected (if it was created with <a href="../commands/GuiControls.htm#ChooseNone">that ability</a>). For MonthCal controls, a range may be specified if the control is <a href="../commands/GuiControls.htm#MonthCalMulti">multi-select</a>.</p>

<h4><a href="../commands/GuiControls.htm#UpDown">UpDown</a> / <a href="../commands/GuiControls.htm#Slider">Slider</a> / <a href="../commands/GuiControls.htm#Progress">Progress</a></h4>
<p><em>RetrievedValue</em> is the control's current position.</p>
<p><em>NewValue</em> is the new position of the control. If <em>NewValue</em>'s first character is a plus sign, the number will be assumed to be an offset from the current position. For example, <code>+10</code> would increase the position by 10 and <code>+-10</code> (plus minus ten) would decrease it by 10. If the new position would be outside the range of the control, the control is generally set to the nearest valid value.</p>

<h4><a href="../commands/GuiControls.htm#Tab">Tab</a> / <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a> / <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a> / <a href="../commands/GuiControls.htm#ListBox">ListBox</a></h4>
<p><em>RetrievedValue</em> is the text of the currently selected item/tab (or its position if the control has the <a href="Gui.htm#AltSubmit">AltSubmit</a> property). For a ComboBox, if there is no selected item, the text in the control's edit field is retrieved instead. For a <a href="../commands/GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, the output is an array.</p>
<p><em>NewValue</em> contains a pipe-delimited list of entries to be appended at the end of the control's list. To replace (overwrite) the list instead, include a pipe as the first character (e.g. <code>"|Red|Green|Blue"</code>) or use an array (e.g. <code>["Red","Green","Blue"]</code>). To make the control empty, specify only a pipe character (<code>"|"</code>) or an blank array (<code>[]</code>). To have one of the entries pre-selected, include two pipes after it (e.g. <code>Red|Green||Blue</code>). The separator between text fields may be changed to something other than pipe. For example, <code>Gui.Opt("+<a href="../commands/GuiCreate.htm#Delimiter">Delimiter</a>`n")</code> would change it to linefeed and <code>Gui.Opt("+DelimiterTab")</code> would change it to tab (`t).</p>
<p>For tab controls, you should not that a tab's sub-controls stay associated with their original tab number; that is, they are never associated with their tab's actual display-name. For this reason, renaming or removing a tab will not change the tab number to which the sub-controls belong. For example, if there are three tabs "Red|Green|Blue" and the second tab is removed by means of <code>MyTab.Value("|Red|Blue")</code>, the sub-controls originally associated with Green will now be associated with Blue. Because of this behavior, only tabs at the end should generally be removed. Tabs that are removed in this way can be added back later, at which time they will reclaim their original set of controls.</p>

<h4><a href="../commands/ListView.htm">ListView</a> / <a href="../commands/TreeView.htm">TreeView</a></h4>
<p>These are not supported. Instead, use the built-in <a href="../commands/ListView.htm#BuiltIn">ListView functions</a> and <a href="../commands/TreeView.htm#BuiltIn">TreeView functions</a>.</p>

<h4><a href="../commands/GuiControls.htm#StatusBar">StatusBar</a></h4>
<p><em>RetrievedValue</em> and <em>NewValue</em> is the text of the first part only (use <a href="../commands/GuiControls.htm#SB_SetText">SB.SetText</a> for greater flexibility).</p>

<h4><a href="../commands/GuiControls.htm#ActiveX">ActiveX</a></h4>
<p><em>RetrievedValue</em> is a new wrapper object for the control's ActiveX component.</p>
</div>

<div class="methodShort" id="Text">
<h2>Text</h2>
<p>Retrieves or sets the text/caption of the control unconditionally, depending of its type.</p>
<pre class="Syntax">RetrievedText := GuiCtrl.Text</pre>
<pre class="Syntax">GuiCtrl.Text := NewText</pre>
<p>Behaves the same as <strong>GuiCtrl.Value</strong> above except for:</p>

<h4><a href="../commands/GuiControls.htm#Checkbox">Checkbox</a> / <a href="../commands/GuiControls.htm#Radio">Radio</a></h4>
<p><em>RetrievedText</em> and <em>NewText</em> is text/caption of the control, even if is -1, 0, or 1.</p>

<h4><a href="../commands/GuiControls.htm#DateTime">DateTime</a></h4>
<p><em>RetrievedText</em> and <em>NewText</em> is  the <a href="../commands/GuiControls.htm#DateTimeFormat">date/time format</a> displayed by the control. If <em>NewText</em> is an empty string, any custom format is removed and the short-date format is put into effect.</p>

<h4><a href="../commands/GuiControls.htm#ComboBox">ComboBox</a></h4>
<p><em>RetrievedText</em> and <em>NewText</em> is the text displayed directly in the ComboBox's Edit control.</p>
</div>

<div class="methodShort" id="Enabled">
<h2>Enabled</h2>
<p>Retrieves the current interaction state of the control, or enables or disables (grays out) it.</p>
<pre class="Syntax">RetrievedState := GuiCtrl.Enabled</pre>
<pre class="Syntax">GuiCtrl.Enabled := NewState</pre>
<p>For Tab controls, this will also enable or disable all of the tab's sub-controls. However, any sub-control explicitly disabled via <code>GuiCtrl.Enabled := false</code> will remember that setting and thus remain disabled even after its Tab control is re-enabled.</p>
</div>

<div class="methodShort" id="Visible">
<h2>Visible</h2>
<p>Retrieves the current visibility state of the control, or shows or hides it.</p>
<pre class="Syntax">RetrievedState := GuiCtrl.Visible</pre>
<pre class="Syntax">GuiCtrl.Visible := NewState</pre>
<p>For Tab controls, this will also show or hide all of the tab's sub-controls. If you additionally want to prevent a control's shortcut key (underlined letter) from working, disable the control via <code>GuiCtrl.Enabled := false</code>.</p>
</div>

<div class="methodShort" id="Pos">
<h2>Pos</h2>
<p>Retrieves the position and size of the control.</p>
<pre class="Syntax">PosSizeObj := GuiCtrl.Pos</pre>
<p>The position is relative to the GUI window's client area, which is the area not including title bar, menu bar, and borders. The information is stored in an <a href="../Objects.htm">object</a>. For example:</p>
<pre>value := MyEdit.Pos
MsgBox The X coordinate is %value.x%. The Y coordinate is %value.y%. The width is %value.w%. The height is %value.h%.</pre>
</div>
</body>
</html>
