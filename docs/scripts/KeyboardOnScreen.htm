<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>On-Screen Keyboard (requires XP/2k/NT) -- by Jon</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="/forum/rss.php">
<link href="/docs/css/default.css" rel="stylesheet" type="text/css">
<link href="/docs/css/print.css" rel="stylesheet" type="text/css" media="print">
</head>
<body>

<h6>On-Screen Keyboard (requires XP/2k/NT) -- by Jon</h6>

<p> This script creates a mock keyboard at the bottom of your screen that shows
 the keys you are pressing in real time. I made it to help me to learn to
 touch-type (to get used to not looking at the keyboard).  The size of the
 on-screen keyboard can be customized at the top of the script. Also, you
 can double-click the tray icon to show or hide the keyboard.
</p>
<p><a href="KeyboardOnScreen.ahk">Download This Script</a> &nbsp;| &nbsp;<a href="index.htm">Other Sample Scripts</a> &nbsp;| &nbsp;<a href="http://www.autohotkey.com">Home</a></p>
<hr>
<pre class="NoIndent"><span class="CodeCom">;---- Configuration Section: Customize the size of the on-screen keyboard and</span>
<span class="CodeCom">; other options here.</span>

<span class="CodeCom">; Changing this font size will make the entire on-screen keyboard get</span>
<span class="CodeCom">; larger or smaller:</span>
k_FontSize = 10
k_FontName = Verdana  <span class="CodeCom">; This can be blank to use the system's default font.</span>
k_FontStyle = Bold    <span class="CodeCom">; Example of an alternative: Italic Underline</span>

<span class="CodeCom">; Names for the tray menu items:</span>
k_MenuItemHide = Hide on-screen &amp;keyboard
k_MenuItemShow = Show on-screen &amp;keyboard

<span class="CodeCom">; To have the keyboard appear on a monitor other than the primary, specify</span>
<span class="CodeCom">; a number such as 2 for the following variable.  Leave it blank to use</span>
<span class="CodeCom">; the primary:</span>
k_Monitor = 

<span class="CodeCom">;---- End of configuration section.  Don't change anything below this point</span>
<span class="CodeCom">; unless you want to alter the basic nature of the script.</span>


<span class="CodeCom">;---- Alter the tray icon menu:</span>
Menu, Tray, Add, %k_MenuItemHide%, k_ShowHide
Menu, Tray, Add, &amp;Exit, k_MenuExit
Menu, Tray, Default, %k_MenuItemHide%
Menu, Tray, NoStandard

<span class="CodeCom">;---- Calculate object dimensions based on chosen font size:</span>
k_KeyWidth = %k_FontSize%
k_KeyWidth *= 3
k_KeyHeight = %k_FontSize%
k_KeyHeight *= 3
k_KeyMargin = %k_FontSize%
k_KeyMargin /= 6
k_SpacebarWidth = %k_FontSize%
k_SpacebarWidth *= 25
k_KeyWidthHalf = %k_KeyWidth%
k_KeyWidthHalf /= 2

k_KeySize = w%k_KeyWidth% h%k_KeyHeight%
k_Position = x+%k_KeyMargin% %k_KeySize%

<span class="CodeCom">;---- Create a GUI window for the on-screen keyboard:</span>
Gui, Font, s%k_FontSize% %k_FontStyle%, %k_FontName%
Gui, -Caption +E0x200 +ToolWindow
TransColor = F1ECED
Gui, Color, %TransColor%  <span class="CodeCom">; This color will be made transparent later below.</span>

<span class="CodeCom">;---- Add a button for each key. Position the first button with absolute</span>
<span class="CodeCom">; coordinates so that all other buttons can be positioned relative to it:</span>
Gui, Add, Button, section %k_KeySize% xm+%k_KeyWidth%, 1
Gui, Add, Button, %k_Position%, 2
Gui, Add, Button, %k_Position%, 3
Gui, Add, Button, %k_Position%, 4
Gui, Add, Button, %k_Position%, 5
Gui, Add, Button, %k_Position%, 6
Gui, Add, Button, %k_Position%, 7
Gui, Add, Button, %k_Position%, 8
Gui, Add, Button, %k_Position%, 9
Gui, Add, Button, %k_Position%, 0
Gui, Add, Button, %k_Position%, -
Gui, Add, Button, %k_Position%, =
Gui, Add, Button, %k_Position%, Bk

Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Tab  <span class="CodeCom">; Auto-width.</span>
Gui, Add, Button, %k_Position%, Q
Gui, Add, Button, %k_Position%, W
Gui, Add, Button, %k_Position%, E
Gui, Add, Button, %k_Position%, R
Gui, Add, Button, %k_Position%, T
Gui, Add, Button, %k_Position%, Y
Gui, Add, Button, %k_Position%, U
Gui, Add, Button, %k_Position%, I
Gui, Add, Button, %k_Position%, O
Gui, Add, Button, %k_Position%, P
Gui, Add, Button, %k_Position%, [
Gui, Add, Button, %k_Position%, ]
Gui, Add, Button, %k_Position%, \

Gui, Add, Button, xs+%k_KeyWidthHalf% y+%k_KeyMargin% %k_KeySize%, A
Gui, Add, Button, %k_Position%, S
Gui, Add, Button, %k_Position%, D
Gui, Add, Button, %k_Position%, F
Gui, Add, Button, %k_Position%, G
Gui, Add, Button, %k_Position%, H
Gui, Add, Button, %k_Position%, J
Gui, Add, Button, %k_Position%, K
Gui, Add, Button, %k_Position%, L
Gui, Add, Button, %k_Position%, `;
Gui, Add, Button, %k_Position%, '
Gui, Add, Button, x+%k_KeyMargin% h%k_KeyHeight%, Enter  <span class="CodeCom">; Auto-width.</span>

<span class="CodeCom">; The first button below adds %A_Space% at the end to widen it a little,</span>
<span class="CodeCom">; making the layout of keys next to it more accurately reflect a real keyboard:</span>
Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Shift%A_Space%%A_Space%
Gui, Add, Button, %k_Position%, Z
Gui, Add, Button, %k_Position%, X
Gui, Add, Button, %k_Position%, C
Gui, Add, Button, %k_Position%, V
Gui, Add, Button, %k_Position%, B
Gui, Add, Button, %k_Position%, N
Gui, Add, Button, %k_Position%, M
Gui, Add, Button, %k_Position%, `,
Gui, Add, Button, %k_Position%, .
Gui, Add, Button, %k_Position%, /

Gui, Add, Button, xm y+%k_KeyMargin% h%k_KeyHeight%, Ctrl  <span class="CodeCom">; Auto-width.</span>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin%, Win      <span class="CodeCom">; Auto-width.</span>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin%, Alt      <span class="CodeCom">; Auto-width.</span>
Gui, Add, Button, h%k_KeyHeight% x+%k_KeyMargin% w%k_SpacebarWidth%, Space


<span class="CodeCom">;---- Show the window:</span>
Gui, Show
k_IsVisible = y

WinGet, k_ID, ID, A   <span class="CodeCom">; Get its window ID.</span>
WinGetPos,,, k_WindowWidth, k_WindowHeight, A

<span class="CodeCom">;---- Position the keyboard at the bottom of the screen (taking into account</span>
<span class="CodeCom">; the position of the taskbar):</span>
SysGet, k_WorkArea, MonitorWorkArea, %k_Monitor%

<span class="CodeCom">; Calculate window's X-position:</span>
k_WindowX = %k_WorkAreaRight%
k_WindowX -= %k_WorkAreaLeft%  <span class="CodeCom">; Now k_WindowX contains the width of this monitor.</span>
k_WindowX -= %k_WindowWidth%
k_WindowX /= 2  <span class="CodeCom">; Calculate position to center it horizontally.</span>
<span class="CodeCom">; The following is done in case the window will be on a non-primary monitor</span>
<span class="CodeCom">; or if the taskbar is anchored on the left side of the screen:</span>
k_WindowX += %k_WorkAreaLeft%

<span class="CodeCom">; Calculate window's Y-position:</span>
k_WindowY = %k_WorkAreaBottom%
k_WindowY -= %k_WindowHeight%

WinMove, A,, %k_WindowX%, %k_WindowY%
WinSet, AlwaysOnTop, On, ahk_id %k_ID%
WinSet, TransColor, %TransColor% 220, ahk_id %k_ID%


<span class="CodeCom">;---- Set all keys as hotkeys. See www.asciitable.com</span>
k_n = 1
k_ASCII = 45

Loop
{
    Transform, k_char, Chr, %k_ASCII%
    StringUpper, k_char, k_char
    if k_char not in &lt;,&gt;,^,~,&#129;,`,
        Hotkey, ~*%k_char%, k_KeyPress
        <span class="CodeCom">; In the above, the asterisk prefix allows the key to be detected regardless</span>
        <span class="CodeCom">; of whether the user is holding down modifier keys such as Control and Shift.</span>
    if k_ASCII = 93
        break
    k_ASCII++
}

return <span class="CodeCom">; End of auto-execute section.</span>


<span class="CodeCom">;---- When a key is pressed by the user, click the corresponding button on-screen:</span>

~*Backspace::
ControlClick, Bk, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, Backspace
ControlClick, Bk, ahk_id %k_ID%, , LEFT, 1, U
return


<span class="CodeCom">; LShift and RShift are used rather than &quot;Shift&quot; because when used as a hotkey,</span>
<span class="CodeCom">; &quot;Shift&quot; would default to firing upon release of the key (in older AHK versions):</span>
~*LShift::
~*RShift::
~*LCtrl::  <span class="CodeCom">; Must use Ctrl not Control to match button names.</span>
~*RCtrl::
~*LAlt::
~*RAlt::
~*LWin::
~*RWin::
StringTrimLeft, k_ThisHotkey, A_ThisHotkey, 3
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, %k_ThisHotkey%
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, U
return


~*,::
~*'::
~*Space::
~*Enter::
~*Tab::
k_KeyPress:
StringReplace, k_ThisHotkey, A_ThisHotkey, ~
StringReplace, k_ThisHotkey, k_ThisHotkey, *
SetTitleMatchMode, 3  <span class="CodeCom">; Prevents the T and B keys from being confused with Tab and Backspace.</span>
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, D
KeyWait, %k_ThisHotkey%
ControlClick, %k_ThisHotkey%, ahk_id %k_ID%, , LEFT, 1, U
Return


k_ShowHide:
if k_IsVisible = y
{
    Gui, Cancel
    Menu, Tray, Rename, %k_MenuItemHide%, %k_MenuItemShow%
    k_IsVisible = n
}
else
{
    Gui, Show
    Menu, Tray, Rename, %k_MenuItemShow%, %k_MenuItemHide%
    k_IsVisible = y
}
return


GuiClose:
k_MenuExit:
ExitApp
</pre>
</body>
</html>
