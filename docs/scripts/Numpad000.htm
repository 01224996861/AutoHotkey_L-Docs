<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Numpad 000 Key</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="alternate" type="application/rss+xml" title="AutoHotkey Forum RSS" href="/forum/rss.php">
<link href="/docs/css/default.css" rel="stylesheet" type="text/css">
<link href="/docs/css/print.css" rel="stylesheet" type="text/css" media="print">
</head>
<body>

<h6>Numpad 000 Key</h6>

<p> This example script makes the special 000 key that appears on certain
 keypads into an equals key.  You can change the action by replacing the
 &ldquo;Send, =&rdquo; line with line(s) of your choice.
</p>
<p><a href="Numpad000.ahk">Download This Script</a> &nbsp;| &nbsp;<a href="index.htm">Other Sample Scripts</a> &nbsp;| &nbsp;<a href="http://www.autohotkey.com">Home</a></p>
<hr>
<pre class="NoIndent">#MaxThreadsPerHotkey 5  <span class="CodeCom">; Allow multiple threads for this hotkey.</span>
$Numpad0::
#MaxThreadsPerHotkey 1
<span class="CodeCom">; Above: Use the $ to force the hook to be used, which prevents an</span>
<span class="CodeCom">; infinite loop since this subroutine itself sends Numpad0, which</span>
<span class="CodeCom">; would otherwise result in a recursive call to itself.</span>
SetBatchLines, 100 <span class="CodeCom">; Make it run a little faster in this case.</span>
DelayBetweenKeys = 30 <span class="CodeCom">; Adjust this value if it doesn't work.</span>
if A_PriorHotkey = %A_ThisHotkey%
{
    if A_TimeSincePriorHotkey &lt; %DelayBetweenKeys%
    {
        if Numpad0Count =
            Numpad0Count = 2 <span class="CodeCom">; i.e. This one plus the prior one.</span>
        else if Numpad0Count = 0
            Numpad0Count = 2
        else
        {
            <span class="CodeCom">; Since we're here, Numpad0Count must be 2 as set by</span>
            <span class="CodeCom">; prior calls, which means this is the third time the</span>
            <span class="CodeCom">; the key has been pressed. Thus, the hotkey sequence</span>
            <span class="CodeCom">; should fire:</span>
            Numpad0Count = 0
            Send, = <span class="CodeCom">; ******* This is the action for the 000 key</span>
        }
        <span class="CodeCom">; In all the above cases, we return without further action:</span>
        CalledReentrantly = y
        return
    }
}
<span class="CodeCom">; Otherwise, this Numpad0 event is either the first in the series</span>
<span class="CodeCom">; or it happened too long after the first one (e.g. perhaps the</span>
<span class="CodeCom">; user is holding down the Numpad0 key to auto-repeat it, which</span>
<span class="CodeCom">; we want to allow).  Therefore, after a short delay -- during</span>
<span class="CodeCom">; which another Numpad0 hotkey event may re-entrantly call this</span>
<span class="CodeCom">; subroutine -- we'll send the key on through if no reentrant</span>
<span class="CodeCom">; calls occurred:</span>
Numpad0Count = 0
CalledReentrantly = n
<span class="CodeCom">; During this sleep, this subroutine may be reentrantly called</span>
<span class="CodeCom">; (i.e. a simultaneous &quot;thread&quot; which runs in parallel to the</span>
<span class="CodeCom">; call we're in now):</span>
Sleep, %DelayBetweenKeys%
if CalledReentrantly = y <span class="CodeCom">; Another &quot;thread&quot; changed the value.</span>
{
    <span class="CodeCom">; Since it was called reentrantly, this key event was the first in</span>
    <span class="CodeCom">; the sequence so should be suppressed (hidden from the system):</span>
    CalledReentrantly = n
    return
}
<span class="CodeCom">; Otherwise it's not part of the sequence so we send it through normally.</span>
<span class="CodeCom">; In other words, the *real* Numpad0 key has been pressed, so we want it</span>
<span class="CodeCom">; to have its normal effect:</span>
Send, {Numpad0}
return
</pre>
</body>
</html>
